<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>严于律己 宽以待人 • Posts by &#34;其他&#34; category</title>
        <link>https://wmingchong.github.io</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Mon, 13 Feb 2023 10:08:12 +0800</pubDate>
        <lastBuildDate>Mon, 13 Feb 2023 10:08:12 +0800</lastBuildDate>
        <category>大数据技术</category>
        <category>容器技术</category>
        <category>MarkDown基础</category>
        <category>计算机基础</category>
        <category>哈哈</category>
        <category>SQL</category>
        <category>推荐系统</category>
        <item>
            <guid isPermalink="true">https://wmingchong.github.io/2023/02/13/qita/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/</guid>
            <title>Lambda架构</title>
            <link>https://wmingchong.github.io/2023/02/13/qita/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/</link>
            <category>推荐系统</category>
            <pubDate>Mon, 13 Feb 2023 10:08:12 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;lambda架构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#lambda架构&#34;&gt;#&lt;/a&gt; lambda 架构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;离线计算和实时计算提供服务的问题&lt;/li&gt;
&lt;li&gt;离线计算的有缺点：
&lt;ul&gt;
&lt;li&gt;优点：能够处理的数据量可以很大，比如 pb 级别&lt;/li&gt;
&lt;li&gt;缺点：速度比较慢，分钟级别的延迟&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实时计算
&lt;ul&gt;
&lt;li&gt;优点：响应快，来一条数据处理一条， ms 级别的响应&lt;/li&gt;
&lt;li&gt;缺点：处理的数据量小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;离线计算框架
&lt;ul&gt;
&lt;li&gt;hadoop&lt;/li&gt;
&lt;li&gt;spark core， spark SQL&lt;/li&gt;
&lt;li&gt;hive&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实时计算框架
&lt;ul&gt;
&lt;li&gt;spark streaming&lt;/li&gt;
&lt;li&gt;storm&lt;/li&gt;
&lt;li&gt;flink&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;消息中间价
&lt;ul&gt;
&lt;li&gt;flume 日志采集系统&lt;/li&gt;
&lt;li&gt;kafka 消息队列&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;存储相关
&lt;ul&gt;
&lt;li&gt;hbase nosql 数据库&lt;/li&gt;
&lt;li&gt;hive sql 操作 hdfs 数据&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;推荐算法架构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#推荐算法架构&#34;&gt;#&lt;/a&gt; 推荐算法架构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;找回 ——》排序 ——》策略调整&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;推荐系统构建模型&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#推荐系统构建模型&#34;&gt;#&lt;/a&gt; 推荐系统构建模型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数据收集
&lt;ul&gt;
&lt;li&gt;显性评分&lt;/li&gt;
&lt;li&gt;隐性评分&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;特征工程
&lt;ul&gt;
&lt;li&gt;协同过滤：用户 - 物品矩阵&lt;/li&gt;
&lt;li&gt;基于内容：分词 tf-idf word2Vec&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模型训练
&lt;ul&gt;
&lt;li&gt;协同过滤
&lt;ul&gt;
&lt;li&gt;kNN&lt;/li&gt;
&lt;li&gt;矩阵分解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;评估、模型上线&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;协同过滤思路介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#协同过滤思路介绍&#34;&gt;#&lt;/a&gt; 协同过滤思路介绍&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;CF 物以类聚，人以群分&lt;/li&gt;
&lt;li&gt;做系统过滤的话，首先特征工程把 用户 - 物品的评分矩阵创建出来&lt;/li&gt;
&lt;li&gt;基于用户的协同过滤
&lt;ul&gt;
&lt;li&gt;给用户 A 找到最相似的 N 个用户&lt;/li&gt;
&lt;li&gt;N 个用户消费过哪些物品&lt;/li&gt;
&lt;li&gt;N 个用户消费过的物品中减去 A 用户消费过的就是推荐结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基于物品的协同过滤
&lt;ul&gt;
&lt;li&gt;给物品 A 找到最相似的 N 个物品&lt;/li&gt;
&lt;li&gt;A 用户消费记录 找到这些物品的相似物品&lt;/li&gt;
&lt;li&gt;从这些相似物品先去重减去 A 用户消费过的就是推荐结果&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;相似度计算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#相似度计算&#34;&gt;#&lt;/a&gt; 相似度计算&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;余弦相似度、皮尔逊相关系数
&lt;ul&gt;
&lt;li&gt;向量的夹角余弦值&lt;/li&gt;
&lt;li&gt;皮尔逊会对向量的每一个分量做中心化&lt;/li&gt;
&lt;li&gt;余弦只考虑方向 不考虑向量长度&lt;/li&gt;
&lt;li&gt;如果评分数据是连续的数值比较适合中余弦，皮尔逊算相似度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;杰卡德相似度
&lt;ul&gt;
&lt;li&gt;交集 / 并集&lt;/li&gt;
&lt;li&gt;计算评分是 0 1 布尔值的相似度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基于模型的算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基于模型的算法&#34;&gt;#&lt;/a&gt; 基于模型的算法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用户矩阵比较稀疏的时候 ，直接去取物品的向量 用户向量计算相似度不太合适&lt;/li&gt;
&lt;li&gt;基于，模型的方法可以解决用户矩阵 物品矩阵比较稀疏的问题&lt;/li&gt;
&lt;li&gt;矩阵分解：
&lt;ul&gt;
&lt;li&gt;把大的矩阵分解成两个比较小的 用户矩阵 物品矩阵&lt;/li&gt;
&lt;li&gt;大矩阵约等于 用户矩阵 乘 物品矩阵&lt;/li&gt;
&lt;li&gt;使用 als 交替最小二乘法优化损失&lt;/li&gt;
&lt;li&gt;优化之后的用户矩阵 取出用户向量&lt;/li&gt;
&lt;li&gt;优化之后的物品矩阵 取出物品向量&lt;/li&gt;
&lt;li&gt;用户向量点乘物品向量 得到最终的评分预测&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;EE
&lt;ul&gt;
&lt;li&gt;Exploitation &amp;amp; Explortation 探索与利用问题&lt;/li&gt;
&lt;li&gt;Exploition 利用用户的历史行为 只给他看曾经看过的 / 消费过的&lt;/li&gt;
&lt;li&gt;Explortation （探测 搜索）发现用户的新兴趣&lt;/li&gt;
&lt;li&gt;ee 问题实际上是矛盾的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;评估手段
&lt;ul&gt;
&lt;li&gt;离线评估和在线评估结合，定期做问卷调查
&lt;ul&gt;
&lt;li&gt;在线评估：灰度发布 &amp;amp; A/B 测试&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;推荐系统的冷启动&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#推荐系统的冷启动&#34;&gt;#&lt;/a&gt; 推荐系统的冷启动&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用户冷启动
&lt;ul&gt;
&lt;li&gt;尽可能收集用户信息 构建用户画像（打标签&lt;/li&gt;
&lt;li&gt;根据用户的标签可以做人群类聚 用户已有的用户的行为做推荐&lt;/li&gt;
&lt;li&gt;更多的使用流行度对剑&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;物品冷启动
&lt;ul&gt;
&lt;li&gt;物品打标签 构建物品画像&lt;/li&gt;
&lt;li&gt;基于内容的推荐&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统冷启动
&lt;ul&gt;
&lt;li&gt;如果应用缺少用户行为数据 -》基于内容的推荐&lt;/li&gt;
&lt;li&gt;随着用户行为积累的越来越多 -》协同过滤&lt;/li&gt;
&lt;li&gt;基于内容和协同过滤共同工作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基于内容的推荐&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基于内容的推荐&#34;&gt;#&lt;/a&gt; 基于内容的推荐&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;给物品打标签&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;系统自己提取从业务数据库中提取&lt;/li&gt;
&lt;li&gt;用户填写&lt;/li&gt;
&lt;li&gt;中文分词 利用算法计算词的权重&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用标签的文字 转换成词向量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;word2Vec 词 -》向量&lt;/li&gt;
&lt;li&gt;用向量来表示语义&lt;/li&gt;
&lt;li&gt;如果两个词的词向量相似度比较高 认为这两个词的语义相近&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用词向量 构建物品的向量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个物品有 N 个关键词，一个关键词对应一个语义&lt;/li&gt;
&lt;li&gt;求和（权重 * 词向量）/N&lt;/li&gt;
&lt;li&gt;利用 N 个关键词的词向量获取物品的向量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过物品计算相似度&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;皮尔逊 相关系数 计算物品向量的相似度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基于内容的推荐-2&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基于内容的推荐-2&#34;&gt;#&lt;/a&gt; 基于内容的推荐&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;content_based: 词向量 ——》物品向量 ——》计算相似度&lt;/li&gt;
&lt;li&gt;item_based cf：user_item matrix——》物品向量 ——》相似度&lt;/li&gt;
&lt;li&gt;区别
&lt;ul&gt;
&lt;li&gt;物品向量构建过程有区别&lt;/li&gt;
&lt;li&gt;基于内容的推荐
&lt;ul&gt;
&lt;li&gt;物品向量 文本（物品描述信息， 系统填标签，用户填标签）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基于物品的推荐
&lt;ul&gt;
&lt;li&gt;用户对物品的评分矩阵 用户的行为数据中来&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;baseline基准预测&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#baseline基准预测&#34;&gt;#&lt;/a&gt; Baseline：基准预测&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;所有物品的评分平均值&lt;/li&gt;
&lt;li&gt;找到每一个用户对物品的平均评分的 bias bu&lt;/li&gt;
&lt;li&gt;找到每一个物品对平均评分 bias bi&lt;/li&gt;
&lt;li&gt;预测的得分 mean+bu+bi u 代表第 u 个用户 i 代表第 i 个物品&lt;/li&gt;
&lt;li&gt;可以使用梯度下降来优化损失&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;矩阵分解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#矩阵分解&#34;&gt;#&lt;/a&gt; 矩阵分解&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;SVD 奇异值分解
&lt;ul&gt;
&lt;li&gt;一个大矩阵 分成 3 个小矩阵 中间是一个 k 方阵&lt;/li&gt;
&lt;li&gt;SVD 只适用于没有缺失值 必须是稠密矩阵&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Funk SVD
&lt;ul&gt;
&lt;li&gt;一个大的矩阵分成两个小矩阵&lt;/li&gt;
&lt;li&gt;LFM 原理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;BiasSVD 矩阵分解 + baseline&lt;/li&gt;
&lt;li&gt;SVD++ 矩阵分解 + baseline + 其他影响（点击、收藏、购买）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基于内容的推荐-3&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#基于内容的推荐-3&#34;&gt;#&lt;/a&gt; 基于内容的推荐&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;画像构建给用户、物品打标签
&lt;ul&gt;
&lt;li&gt;物品画像
&lt;ul&gt;
&lt;li&gt;分类信息&lt;/li&gt;
&lt;li&gt;标题&lt;/li&gt;
&lt;li&gt;电影、音乐、主演。。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用户画像
&lt;ul&gt;
&lt;li&gt;喜好的物品类别、行为偏好&lt;/li&gt;
&lt;li&gt;基本人口学属性&lt;/li&gt;
&lt;li&gt;活跃程度&lt;/li&gt;
&lt;li&gt;风控维度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PGC 应用自己生成&lt;/li&gt;
&lt;li&gt;UGC 用户生成&lt;/li&gt;
&lt;li&gt;基于内容推荐的算法流程
&lt;ul&gt;
&lt;li&gt;用户画像、物品画像&lt;/li&gt;
&lt;li&gt;匹配用户画像、物品画像&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;物品冷启动问题
&lt;ul&gt;
&lt;li&gt;画像 -&amp;gt; 词向量 -&amp;gt; 物品向量 -&amp;gt; 计算物品相似度&lt;/li&gt;
&lt;li&gt;从文本描述的角度找相似的物品&lt;/li&gt;
&lt;li&gt;当用户在浏览 A 的时候，通过上述套路找到跟物品 A 相似的一系列物品&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://wmingchong.github.io/2023/02/12/qita/SQL%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E5%87%BD%E6%95%B0/</guid>
            <title>SQL关键字和函数</title>
            <link>https://wmingchong.github.io/2023/02/12/qita/SQL%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E5%87%BD%E6%95%B0/</link>
            <category>SQL</category>
            <pubDate>Sun, 12 Feb 2023 09:08:12 +0800</pubDate>
            <description><![CDATA[ &lt;h3 id=&#34;sql关键字以及函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sql关键字以及函数&#34;&gt;#&lt;/a&gt; SQL 关键字以及函数&lt;/h3&gt;
&lt;h4 id=&#34;sql中的开窗口函数over&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sql中的开窗口函数over&#34;&gt;#&lt;/a&gt; SQL 中的开窗口函数 OVER ()&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;：OVER 用于为行定义一个窗口，它对一组值进行操作，不需要使用 GROUP BY 子句对数据进行分组，能够在同一行中同时返回基础行的列和聚合列。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;语法&lt;/strong&gt;：OVER ([ PARTITION BY column] [ ORDER BY culumn ] )&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;用法&lt;/strong&gt;：OVER 开窗函数必须与聚合函数或排序函数一起使用，聚合函数一般指 SUM (),MAX (),MIN,COUNT (),AVG () 等常见函数。排序函数一般指 RANK (),ROW_NUMBER (),DENSE_RANK (),NTILE () 等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;拓展&lt;/strong&gt;：PARTITION BY 子句进行分组；ORDER BY 子句进行排序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;sql中的窗口函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sql中的窗口函数&#34;&gt;#&lt;/a&gt; SQL 中的窗口函数&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;first_value： 用来返回一个分组窗口里的第一行记录，也即排名第一的那行记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;last_value： 和 first_value 相反，用来返回分组窗口里的最后一行记录，也即倒数第一的那行记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;nth_value： 用来返回分组内指定行的记录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;ntile： 用来在分组内继续二次分组。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;ROW_NUMBER ()：当前行在其分组内的序号。不管其排序结果中是否出现重复值。其排序结果都为：1,2.3.4.5.。顺序排序 ——1、2、3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;DENSE_RANK ()：不间断的组内排序。使用这个函数时，可以出现 1.1.2.2 这种形式的分组。并列排序，不跳过重复序号 ——1、1、2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;RANK ()：间断的组内排序。其排序结果可能出现如下结果：1.1.3.4.4.6。并列排序，跳过重复序号 ——1、1、3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;sql中的日期函数date_add&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sql中的日期函数date_add&#34;&gt;#&lt;/a&gt; SQL 中的日期函数 DATE_ADD ()&lt;/h4&gt;
&lt;p&gt;date_add ()：常常用户在 mysql 的 sql 中实现对日期类型的操作，比如增加或者减少，但是不改变原来的数据，只是对查询的数据做处理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：DATE_ADD (date,INTERVAL expr unit)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- 得到当前时间增加1天的结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; date_add(now(),&lt;span class=&#34;type&#34;&gt;interval&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;day&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- 得到当前时间减少72个小时的结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; date_add(now(),&lt;span class=&#34;type&#34;&gt;interval&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;-72&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;hour&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;sql中的union&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sql中的union&#34;&gt;#&lt;/a&gt; SQL 中的 union&lt;/h4&gt;
&lt;p&gt;作用：将两张毫不相干的表的查询结果拼接在一起输出，前提是两个查询的列数要相同。&lt;/p&gt;
&lt;h4 id=&#34;sql中的round&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sql中的round&#34;&gt;#&lt;/a&gt; SQL 中的 ROUND ()&lt;/h4&gt;
&lt;p&gt;round () 函数用于把&lt;strong&gt;数值字段&lt;/strong&gt;舍入为指定的小数位数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：SELECT ROUND (column_name,decimals) FROM [表名]&lt;/p&gt;
&lt;p&gt;column_name: 要舍入的字段，必需&lt;/p&gt;
&lt;p&gt;decimals: 规定要返回的小数位数，可选&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- ROUND(X)函数将值X四舍五入之后保留整数部分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- -7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; ROUND(&lt;span class=&#34;number&#34;&gt;-6.6&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- 1100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; ROUND(&lt;span class=&#34;number&#34;&gt;1123.26723&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;-2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- 1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; ROUND(&lt;span class=&#34;number&#34;&gt;1123.26723&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;-3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- 根据参数D值，将参数X四舍五入后得到保留小数点后D位的值，X值的小数位不够D位的补零&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- 如果D为负值，则保留小数点左边D位，先进行四舍五入操作，再将相应的位数值取零&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- -6.7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; ROUND(&lt;span class=&#34;number&#34;&gt;-6.66&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;sql中的日期格式化函数date_format&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#sql中的日期格式化函数date_format&#34;&gt;#&lt;/a&gt; SQL 中的日期格式化函数 date_format ()&lt;/h4&gt;
&lt;p&gt;date_format 函数用于格式化日期字段。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：DATE_FORMAT (date, format)&lt;/p&gt;
&lt;p&gt;date 为日期字段，format 为格式化字符串。常用的格式化字符有 % Y、% m、% d 等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight sql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- 这将返回日期字段按照“年-月-日”格式格式化后的结果。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;SELECT&lt;/span&gt; DATE_FORMAT(date_field, &lt;span class=&#34;string&#34;&gt;&amp;#x27;%Y-%m-%d&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- 需要注意的是，在使用 date_format 函数时，date 字段需要是日期类型的，如果是字符串类型的日期需要使用str_to_date函数转换成日期类型。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;select&lt;/span&gt; DATE_FORMAT(str_to_date(&lt;span class=&#34;string&#34;&gt;&amp;#x27;2022-10-01&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;%Y-%m-%d&amp;#x27;&lt;/span&gt;),&lt;span class=&#34;string&#34;&gt;&amp;#x27;%Y-%m-%d %T&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;-- 这将返回字符串类型 &amp;#x27;2022-10-01&amp;#x27; 转换成日期类型后的结果，并按照 &amp;#x27;%Y-%m-%d %T&amp;#x27;格式输出。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
    </channel>
</rss>
