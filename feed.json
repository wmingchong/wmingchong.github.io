{
    "version": "https://jsonfeed.org/version/1",
    "title": "严于律己 宽以待人",
    "description": "",
    "home_page_url": "https://wmingchong.github.io",
    "items": [
        {
            "id": "https://wmingchong.github.io/2023/02/24/BigData/%E5%A4%A7%E6%95%B0%E6%8D%AE-shell/",
            "url": "https://wmingchong.github.io/2023/02/24/BigData/%E5%A4%A7%E6%95%B0%E6%8D%AE-shell/",
            "title": "大数据技术-Shell",
            "date_published": "2023-02-24T03:09:45.000Z",
            "content_html": "<h3 id=\"shell\"><a class=\"markdownIt-Anchor\" href=\"#shell\">#</a> shell</h3>\n<h4 id=\"第一章-shell概述\"><a class=\"markdownIt-Anchor\" href=\"#第一章-shell概述\">#</a> 第一章 Shell 概述</h4>\n<p>shell 是一个命令行解释器，它接收应用程序、用户命令，然后调用操作系统</p>\n<p>shell 还是一个功能强大的编程语言，易编写，易调试，灵活性强（但现在基本使用 python）</p>\n<h4 id=\"第二章-shell解释器\"><a class=\"markdownIt-Anchor\" href=\"#第二章-shell解释器\">#</a> 第二章 Shell 解释器</h4>\n<p>1.Linux 提供的 Shell 解释器有：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# cat /etc/shells</span><br><span class=\"line\">/bin/sh  #常用</span><br><span class=\"line\">/bin/bash  #常用</span><br><span class=\"line\">/sbin/nologin</span><br><span class=\"line\">/usr/bin/sh</span><br><span class=\"line\">/usr/bin/bash</span><br><span class=\"line\">/usr/sbin/nologin</span><br></pre></td></tr></table></figure>\n<p>2.bash 和 sh 的关系</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 bin]$ ll | grep bash</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 941880 5月  11 2016 bash</span><br><span class=\"line\">lrwxrwxrwx. 1 root root      4 5月  27 2017 sh -&gt; bash</span><br></pre></td></tr></table></figure>\n<p>3.centos 默认的解释器是 bash</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]# echo $SHELL</span><br><span class=\"line\">/bin/bash</span><br></pre></td></tr></table></figure>\n<h4 id=\"第三章-shell脚本入门\"><a class=\"markdownIt-Anchor\" href=\"#第三章-shell脚本入门\">#</a> 第三章 Shell 脚本入门</h4>\n<p>1．脚本格式</p>\n<p>脚本以 #!/bin/bash 开头（指定解析器，用 bash 解析）</p>\n<p>2. 实际操作：helloworld</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost datas]# touch helloworld.sh</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!bin/bash</span></span><br><span class=\"line\">hello world!</span><br></pre></td></tr></table></figure>\n<p>第一种：采用 bash 或 sh + 脚本的相对路径或绝对路径（不用赋予脚本 + x 权限）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost datas]# bash /root/datas/hellword.sh </span><br><span class=\"line\">hello word!</span><br><span class=\"line\">[root@localhost datas]# sh /root/datas/hellword.sh </span><br><span class=\"line\">hello word!</span><br></pre></td></tr></table></figure>\n<p>第二种：采用输入脚本的绝对路径或相对路径执行脚本（必须具有可执行权限 + x）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#首先要赋予helloworld.sh 脚本的+x权限</span><br><span class=\"line\">[root@localhost datas]# chmod 777 hellword.sh</span><br><span class=\"line\">#执行脚本</span><br><span class=\"line\">[root@localhost datas]# ./hellword.sh</span><br><span class=\"line\">hello word!</span><br></pre></td></tr></table></figure>\n<p><strong>注意：第一种执行方法，本质是 bash 解析器帮你执行脚本，所以脚本本身不需要执行权限。第二种执行方法，本质是脚本需要自己执行，所以需要执行权限。</strong></p>\n<p>3. 第二个脚本：多命令脚本</p>\n<p>要求在 /root 下面创建一个 banzhang.txt, 并在文件中增加‘i love you’</p>\n<p>实际操作：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ touch batch.sh</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ vi batch.sh</span><br><span class=\"line\"></span><br><span class=\"line\">在batch.sh中输入如下内容</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/atguigu</span><br><span class=\"line\">touch cls.txt</span><br><span class=\"line\">echo &quot;I love cls&quot; &gt;&gt;cls.txt</span><br></pre></td></tr></table></figure>\n<h4 id=\"第四章-shell中的变量\"><a class=\"markdownIt-Anchor\" href=\"#第四章-shell中的变量\">#</a> 第四章 Shell 中的变量</h4>\n<h5 id=\"41-系统变量\"><a class=\"markdownIt-Anchor\" href=\"#41-系统变量\">#</a> 4.1 系统变量</h5>\n<p>1. 常用系统变量</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>O</mi><mi>M</mi><mi>E</mi><mtext>、</mtext></mrow><annotation encoding=\"application/x-tex\">HOME、</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord cjk_fallback\">、</span></span></span></span>PWD、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>H</mi><mi>E</mi><mi>L</mi><mi>L</mi><mtext>、</mtext></mrow><annotation encoding=\"application/x-tex\">SHELL、</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\">L</span><span class=\"mord cjk_fallback\">、</span></span></span></span>USER 等</p>\n<h5 id=\"42-自定义变量\"><a class=\"markdownIt-Anchor\" href=\"#42-自定义变量\">#</a> 4.2 自定义变量</h5>\n<p><strong>1. 基本语法</strong></p>\n<p>（1）定义变量：变量 = 值</p>\n<p>（2）撤销变量：unset 变量</p>\n<p>（3）声明静态变量：readonly 变量，注意：不能 unset</p>\n<p><strong>2．变量定义规则</strong></p>\n<p>​\t（1）变量名称可以由字母、数字和下划线组成，但是不能以数字开头，环境变量名建议大写。</p>\n<p>​\t（2）等号两侧不能有空格</p>\n<p>​\t（3）在 bash 中，变量默认类型都是字符串类型，无法直接进行数值运算。</p>\n<p>​\t（4）变量的值如果有空格，需要使用双引号或单引号括起来。</p>\n<h5 id=\"3实际操作\"><a class=\"markdownIt-Anchor\" href=\"#3实际操作\">#</a> 3. 实际操作</h5>\n<p>1. 在 bash 中，变量默认类型都是字符串类型，无法直接进行数值运算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 ~]$ C=1+2</span><br><span class=\"line\">[atguigu@hadoop102 ~]$ echo $C</span><br><span class=\"line\">1+2</span><br></pre></td></tr></table></figure>\n<p>2. 变量的值如果有空格，需要使用双引号或单引号括起来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 ~]$ D=I love banzhang</span><br><span class=\"line\">-bash: world: command not found</span><br><span class=\"line\">[atguigu@hadoop102 ~]$ D=&quot;I love banzhang&quot;</span><br><span class=\"line\">[atguigu@hadoop102 ~]$ echo $A</span><br><span class=\"line\">I love banzhang</span><br></pre></td></tr></table></figure>\n<p>3. 可把变量提升为全局环境变量，可供其他 Shell 程序使用</p>\n<p>export 变量名（在配置 hadoop、hive、java 等环境变量中使用）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost datas]# vi hellword.sh</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo &quot;hello word!&quot;</span><br><span class=\"line\">echo $d</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost datas]# ./hellword.sh </span><br><span class=\"line\">hello word!</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost datas]# export d  #提升为全局变量</span><br><span class=\"line\">[root@localhost datas]# ./hellword.sh </span><br><span class=\"line\">hello word!</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<h5 id=\"43特殊变量\"><a class=\"markdownIt-Anchor\" href=\"#43特殊变量\">#</a> 4.3 特殊变量</h5>\n<p><strong>$n</strong></p>\n<p>$n\t（功能描述：n 为数字，$0 代表该脚本名称，$1-<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>9</mn><mtext>代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如</mtext></mrow><annotation encoding=\"application/x-tex\">9代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">9</span><span class=\"mord cjk_fallback\">代</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">第</span><span class=\"mord cjk_fallback\">一</span><span class=\"mord cjk_fallback\">到</span><span class=\"mord cjk_fallback\">第</span><span class=\"mord cjk_fallback\">九</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">参</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">十</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">上</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">参</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">十</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">上</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">参</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">需</span><span class=\"mord cjk_fallback\">要</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord cjk_fallback\">大</span><span class=\"mord cjk_fallback\">括</span><span class=\"mord cjk_fallback\">号</span><span class=\"mord cjk_fallback\">包</span><span class=\"mord cjk_fallback\">含</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">如</span></span></span></span> {10}）</p>\n<p>2．案例实操</p>\n<p>（1）输出该脚本文件名称、输入参数 1 和输入参数 2 的值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ touch parameter.sh </span><br><span class=\"line\">[atguigu@hadoop101 datas]$ vim parameter.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo &quot;$0  $1   $2&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ chmod 777 parameter.sh</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ ./parameter.sh cls  xz</span><br><span class=\"line\">./parameter.sh  cls   xz</span><br></pre></td></tr></table></figure>\n<p><strong>$#</strong></p>\n<p>1．基本语法</p>\n<p>​\t$#\t（功能描述：获取所有输入参数个数，常用于循环）。</p>\n<p>2．案例实操</p>\n<p>（1）获取输入参数的个数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ vim parameter.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo &quot;$0  $1   $2&quot;</span><br><span class=\"line\">echo $#</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ chmod 777 parameter.sh</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ ./parameter.sh cls  xz</span><br><span class=\"line\">parameter.sh cls xz </span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<p><strong><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∗</mo><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">*,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6597200000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∗</span><span class=\"mpunct\">,</span></span></span></span>@</strong></p>\n<p>1．基本语法</p>\n<p>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∗</mo><mtext>（功能描述：这个变量代表命令行中所有的参数，</mtext></mrow><annotation encoding=\"application/x-tex\">*\t（功能描述：这个变量代表命令行中所有的参数，</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">∗</span><span class=\"mord cjk_fallback\">（</span><span class=\"mord cjk_fallback\">功</span><span class=\"mord cjk_fallback\">能</span><span class=\"mord cjk_fallback\">描</span><span class=\"mord cjk_fallback\">述</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">这</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">变</span><span class=\"mord cjk_fallback\">量</span><span class=\"mord cjk_fallback\">代</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">命</span><span class=\"mord cjk_fallback\">令</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">中</span><span class=\"mord cjk_fallback\">所</span><span class=\"mord cjk_fallback\">有</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">参</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">，</span></span></span></span>* 把所有的参数看成一个整体）</p>\n<p>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">@</mi><mtext>（功能描述：这个变量也代表命令行中所有的参数，不过</mtext></mrow><annotation encoding=\"application/x-tex\">@\t（功能描述：这个变量也代表命令行中所有的参数，不过</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">@</span><span class=\"mord cjk_fallback\">（</span><span class=\"mord cjk_fallback\">功</span><span class=\"mord cjk_fallback\">能</span><span class=\"mord cjk_fallback\">描</span><span class=\"mord cjk_fallback\">述</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">这</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">变</span><span class=\"mord cjk_fallback\">量</span><span class=\"mord cjk_fallback\">也</span><span class=\"mord cjk_fallback\">代</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">命</span><span class=\"mord cjk_fallback\">令</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">中</span><span class=\"mord cjk_fallback\">所</span><span class=\"mord cjk_fallback\">有</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">参</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">不</span><span class=\"mord cjk_fallback\">过</span></span></span></span> @把每个参数区分对待）</p>\n<p>2．案例实操</p>\n<p>（1）打印输入的所有参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ vim parameter.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo &quot;$0  $1   $2&quot;</span><br><span class=\"line\">echo $#</span><br><span class=\"line\">echo $*</span><br><span class=\"line\">echo $@</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ bash parameter.sh 1 2 3</span><br><span class=\"line\">parameter.sh  1   2</span><br><span class=\"line\">3</span><br><span class=\"line\">1 2 3</span><br><span class=\"line\">1 2 3</span><br></pre></td></tr></table></figure>\n<p><strong>$?</strong></p>\n<p>1．基本语法</p>\n<p>$？\t（功能描述：最后一次执行的命令的返回状态。如果这个变量的值为 0，证明上一个命令正确执行；如果这个变量的值为非 0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。）</p>\n<p>2．案例实操</p>\n<p>​\t（1）判断 helloworld.sh 脚本是否正确执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ ./helloworld.sh </span><br><span class=\"line\">hello world</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ echo $?</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n<h4 id=\"第五章-运算符\"><a class=\"markdownIt-Anchor\" href=\"#第五章-运算符\">#</a> 第五章 运算符</h4>\n<p><strong>1．基本语法</strong></p>\n<p>（1）“<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mtext>运算式</mtext><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mtext>”或“</mtext></mrow><annotation encoding=\"application/x-tex\">((运算式))”或“</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord cjk_fallback\">运</span><span class=\"mord cjk_fallback\">算</span><span class=\"mord cjk_fallback\">式</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mord\">”</span><span class=\"mord cjk_fallback\">或</span><span class=\"mord\">“</span></span></span></span>[运算式]”</p>\n<p>（2）expr  + , - , *,  /,  %   加，减，乘，除，取余</p>\n<p><strong>注意：expr 运算符间要有空格</strong></p>\n<p><strong>2．案例实操：</strong></p>\n<p>（1）计算 3+2 的值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ expr 2 + 3</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n<p>（2）计算（2+3）X4 的值</p>\n<p>​\t（a）expr 一步完成计算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ expr `expr 2 + 3` \\* 4</span><br><span class=\"line\">20</span><br></pre></td></tr></table></figure>\n<p>​\t（b）采用 $[运算式] 方式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost datas]# a=$[(2+3)*4]</span><br><span class=\"line\">[root@localhost datas]# echo $a</span><br><span class=\"line\">20</span><br></pre></td></tr></table></figure>\n<h4 id=\"第六章-条件判断\"><a class=\"markdownIt-Anchor\" href=\"#第六章-条件判断\">#</a> 第六章 条件判断</h4>\n<p><strong>1．基本语法</strong></p>\n<p>[condition]（注意 condition 前后要有空格）</p>\n<p>注意：条件非空即为 true，[atguigu] 返回 true，[] 返回 false。</p>\n<p>*<em>2. 常用判断条件</em> *</p>\n<p>（1）两个整数之间比较</p>\n<p>= 字符串比较</p>\n<p>-lt 小于（less than）\t\t\t-le 小于等于（less equal）</p>\n<p>-eq 等于（equal）\t\t\t\t-gt 大于（greater than）</p>\n<p>-ge 大于等于（greater equal）\t-ne 不等于（Not equal）</p>\n<p>（2）按照文件权限进行判断</p>\n<p>-r 有读的权限（read）\t\t\t-w 有写的权限（write）</p>\n<p>-x 有执行的权限（execute）</p>\n<p>（3）按照文件类型进行判断</p>\n<p>-f 文件存在并且是一个常规的文件（file）</p>\n<p>-e 文件存在（existence）\t\t-d 文件存在并是一个目录（directory）</p>\n<h4 id=\"第七章-流程控制\"><a class=\"markdownIt-Anchor\" href=\"#第七章-流程控制\">#</a> 第七章 流程控制</h4>\n<h5 id=\"71-if判断\"><a class=\"markdownIt-Anchor\" href=\"#71-if判断\">#</a> 7.1 if 判断</h5>\n<p>1．基本语法</p>\n<p>if [条件判断式];then</p>\n<p>程序</p>\n<p>fi</p>\n<p><strong>或者</strong></p>\n<p>if [条件判断式]</p>\n<p>then</p>\n<p>程序</p>\n<p>fi</p>\n<p>​\t<strong>注意事项</strong>：</p>\n<p>（1）[条件判断式]，中括号和条件判断式之间必须有空格</p>\n<p>（2）if 后要有空格</p>\n<p><strong>2．案例实操</strong></p>\n<p>（1）输入一个数字，如果是 1，则输出 banzhang zhen shuai，如果是 2，则输出 cls zhen mei，如果是其它，什么也不输出。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $1 -eq &quot;1&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">        echo &quot;banzhang zhen shuai&quot;</span><br><span class=\"line\">elif [ $1 -eq &quot;2&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">        echo &quot;cls zhen mei&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ chmod 777 if.sh </span><br><span class=\"line\">[atguigu@hadoop101 datas]$ ./if.sh 1</span><br><span class=\"line\">banzhang zhen shuai</span><br></pre></td></tr></table></figure>\n<h5 id=\"72-case语句\"><a class=\"markdownIt-Anchor\" href=\"#72-case语句\">#</a> 7.2 case 语句</h5>\n<p><strong>1．基本语法</strong></p>\n<p>case $ 变量名 in</p>\n<p>“值 1”）</p>\n<p>如果变量的值等于值 1，则执行程序 1</p>\n<p>;;</p>\n<p>“值 2”）</p>\n<p>如果变量的值等于值 2，则执行程序 2</p>\n<p>;;</p>\n<p>… 省略其他分支…</p>\n<p>*）</p>\n<p>如果变量的值都不是以上的值，则执行此程序</p>\n<p>;;</p>\n<p>esac</p>\n<p><strong>注意事项：</strong></p>\n<p>\\1) case 行尾必须为单词 “in”，每一个模式匹配必须以右括号 “）” 结束。</p>\n<p>\\2) 双分号 “<em><strong>*;;*</strong></em>” 表示命令序列结束，相当于 java 中的 break。</p>\n<p>\\3) 最后的 “*）” 表示默认模式，相当于 java 中的 default。</p>\n<p><strong>2．案例实操</strong></p>\n<p>（1）输入一个数字，如果是 1，则输出 banzhang，如果是 2，则输出 cls，如果是其它，输出 renyao。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ vim case.sh</span><br><span class=\"line\"></span><br><span class=\"line\">!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">case $1 in</span><br><span class=\"line\">&quot;1&quot;)</span><br><span class=\"line\">        echo &quot;banzhang&quot;</span><br><span class=\"line\">;;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;2&quot;)</span><br><span class=\"line\">        echo &quot;cls&quot;</span><br><span class=\"line\">;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">        echo &quot;renyao&quot;</span><br><span class=\"line\">;;</span><br><span class=\"line\">esac</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ chmod 777 case.sh</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ ./case.sh 1</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<h5 id=\"73-for循环\"><a class=\"markdownIt-Anchor\" href=\"#73-for循环\">#</a> 7.3 for 循环</h5>\n<p>1．基本语法 1</p>\n<p>​\tfor ((初始值；循环控制条件；变量变化))</p>\n<p>do</p>\n<p>程序</p>\n<p>done</p>\n<p>2．案例实操</p>\n<p>（1）从 1 加到 100</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ touch for1.sh</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ vim for1.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">s=0</span><br><span class=\"line\">for((i=0;i&lt;=100;i++))</span><br><span class=\"line\">do</span><br><span class=\"line\">        s=$[$s+$i]</span><br><span class=\"line\">done</span><br><span class=\"line\">echo $s</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ chmod 777 for1.sh </span><br><span class=\"line\">[atguigu@hadoop101 datas]$ ./for1.sh </span><br><span class=\"line\">“5050”</span><br></pre></td></tr></table></figure>\n<p>3．基本语法 2</p>\n<p>for 变量 in 值 1 值 2 值 3…</p>\n<p>do</p>\n<p>程序</p>\n<p>done</p>\n<p>4．案例实操</p>\n<p>​\t（1）打印所有输入参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ touch for2.sh</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ vim for2.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#打印数字</span><br><span class=\"line\"></span><br><span class=\"line\">for i in $*</span><br><span class=\"line\">    do</span><br><span class=\"line\">      echo &quot;ban zhang love $i &quot;</span><br><span class=\"line\">    done</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ chmod 777 for2.sh </span><br><span class=\"line\">[atguigu@hadoop101 datas]$ bash for2.sh cls xz bd</span><br><span class=\"line\">ban zhang love cls</span><br><span class=\"line\">ban zhang love xz</span><br><span class=\"line\">ban zhang love bd</span><br></pre></td></tr></table></figure>\n<p>（2）比较<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∗</mo><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">*和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">∗</span><span class=\"mord cjk_fallback\">和</span></span></span></span> @区别</p>\n<p>（a）<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∗</mo><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">*和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">∗</span><span class=\"mord cjk_fallback\">和</span></span></span></span> @都表示传递给函数或脚本的所有参数，不被双引号 “” 包含时，都以 $1 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">2 …</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span>n 的形式输出所有参数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ touch for.sh</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ vim for.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash </span><br><span class=\"line\"></span><br><span class=\"line\">for i in $*</span><br><span class=\"line\">do</span><br><span class=\"line\">      echo &quot;ban zhang love $i &quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">for j in $@</span><br><span class=\"line\">do      </span><br><span class=\"line\">        echo &quot;ban zhang love $j&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ bash for.sh cls xz bd</span><br><span class=\"line\">ban zhang love cls </span><br><span class=\"line\">ban zhang love xz </span><br><span class=\"line\">ban zhang love bd </span><br><span class=\"line\">ban zhang love cls</span><br><span class=\"line\">ban zhang love xz</span><br><span class=\"line\">ban zhang love bd</span><br></pre></td></tr></table></figure>\n<p>（b）当它们被双引号 “” 包含时，“$*” 会将所有的参数作为一个整体，以 “$1 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">2 …</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span>n” 的形式输出所有参数；“$@” 会将各个参数分开，以 “$1” “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mtext>”</mtext><mo>…</mo><mtext>”</mtext></mrow><annotation encoding=\"application/x-tex\">2”…”</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">”</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">”</span></span></span></span>n” 的形式输出所有参数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash </span><br><span class=\"line\"></span><br><span class=\"line\">for i in &quot;$*&quot; </span><br><span class=\"line\">#$*中的所有参数看成是一个整体，所以这个for循环只会循环一次 </span><br><span class=\"line\">        do </span><br><span class=\"line\">                echo &quot;ban zhang love $i&quot;</span><br><span class=\"line\">        done </span><br><span class=\"line\"></span><br><span class=\"line\">for j in &quot;$@&quot; </span><br><span class=\"line\">#$@中的每个参数都看成是独立的，所以“$@”中有几个参数，就会循环几次 </span><br><span class=\"line\">        do </span><br><span class=\"line\">                echo &quot;ban zhang love $j&quot; </span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ chmod 777 for.sh</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ bash for.sh cls xz bd</span><br><span class=\"line\">ban zhang love cls xz bd</span><br><span class=\"line\">ban zhang love cls</span><br><span class=\"line\">ban zhang love xz</span><br><span class=\"line\">ban zhang love bd</span><br></pre></td></tr></table></figure>\n<h5 id=\"74-while循环\"><a class=\"markdownIt-Anchor\" href=\"#74-while循环\">#</a> 7.4 while 循环</h5>\n<p>1．基本语法</p>\n<p>while [条件判断式]</p>\n<p>do</p>\n<p>程序</p>\n<p>done</p>\n<p>2．案例实操</p>\n<p>​\t（1）从 1 加到 100</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ touch while.sh</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ vim while.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">s=0</span><br><span class=\"line\">i=1</span><br><span class=\"line\">while [ $i -le 100 ]</span><br><span class=\"line\">do</span><br><span class=\"line\">        s=$[$s+$i]</span><br><span class=\"line\">        i=$[$i+1]</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">echo $s</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ chmod 777 while.sh </span><br><span class=\"line\">[atguigu@hadoop101 datas]$ ./while.sh </span><br><span class=\"line\">5050</span><br></pre></td></tr></table></figure>\n<h4 id=\"第八章-read读取控制台输入\"><a class=\"markdownIt-Anchor\" href=\"#第八章-read读取控制台输入\">#</a> 第八章 read 读取控制台输入</h4>\n<p>1．基本语法</p>\n<p>​\tread (选项)(参数)</p>\n<p>​\t选项：</p>\n<p>-p：指定读取值时的提示符；</p>\n<p>-t：指定读取值时等待的时间（秒）。</p>\n<p>参数</p>\n<p>​\t变量：指定读取值的变量名</p>\n<p>2．案例实操</p>\n<p>​\t（1）提示 7 秒内，读取控制台输入的名称</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ touch read.sh</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ vim read.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">read -t 7 -p &quot;Enter your name in 7 seconds &quot; NAME</span><br><span class=\"line\">echo $NAME</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ ./read.sh </span><br><span class=\"line\">Enter your name in 7 seconds xiaoze</span><br><span class=\"line\">xiaoze</span><br></pre></td></tr></table></figure>\n<h4 id=\"第九章-函数\"><a class=\"markdownIt-Anchor\" href=\"#第九章-函数\">#</a> 第九章 函数</h4>\n<h5 id=\"91-系统函数\"><a class=\"markdownIt-Anchor\" href=\"#91-系统函数\">#</a> 9.1 系统函数</h5>\n<p>1．basename 基本语法</p>\n<p>basename [string /pathname] [suffix]  （功能描述：basename 命令会删掉所有的前缀包括最后一个（‘/’）字符，然后将字符串显示出来。</p>\n<p>选项：</p>\n<p>suffix 为后缀，如果 suffix 被指定了，basename 会将 pathname 或 string 中的 suffix 去掉。</p>\n<p>2．案例实操</p>\n<p>（1）截取该 /home/atguigu/banzhang.txt 路径的文件名称</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ basename /home/atguigu/banzhang.txt </span><br><span class=\"line\">banzhang.txt</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ basename /home/atguigu/banzhang.txt .txt</span><br><span class=\"line\">banzhang</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>dirname 基本语法</li>\n</ol>\n<p>​\tdirname 文件绝对路径\t\t（功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分））</p>\n<p>4．案例实操</p>\n<p>（1）获取 banzhang.txt 文件的路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 ~]$ dirname /home/atguigu/banzhang.txt </span><br><span class=\"line\">/home/atguigu</span><br></pre></td></tr></table></figure>\n<h5 id=\"92-自定义函数\"><a class=\"markdownIt-Anchor\" href=\"#92-自定义函数\">#</a> 9.2 自定义函数</h5>\n<p>1．基本语法</p>\n<p>[ function ] funname[()]</p>\n<p>{</p>\n<p>​\tAction;</p>\n<p>​\t[return int;]</p>\n<p>}</p>\n<p>funname</p>\n<p>2．经验技巧</p>\n<p>​\t（1）必须在调用函数地方之前，先声明函数，shell 脚本是逐行运行。不会像其它语言一样先编译。</p>\n<p>​\t（2）函数返回值，只能通过 $? 系统变量获得，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。return 后跟数值 n (0-255)</p>\n<p>3．案例实操</p>\n<p>​\t（1）计算两个输入参数的和</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ touch fun.sh</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ vim fun.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">function sum()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    s=0</span><br><span class=\"line\">    s=$[ $1 + $2 ]</span><br><span class=\"line\">    echo &quot;$s&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">read -p &quot;Please input the number1: &quot; n1;</span><br><span class=\"line\">read -p &quot;Please input the number2: &quot; n2;</span><br><span class=\"line\">sum $n1 $n2;</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ chmod 777 fun.sh</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ ./fun.sh </span><br><span class=\"line\">Please input the number1: 2</span><br><span class=\"line\">Please input the number2: 5</span><br><span class=\"line\">7</span><br></pre></td></tr></table></figure>\n<h4 id=\"第十章-shell工具\"><a class=\"markdownIt-Anchor\" href=\"#第十章-shell工具\">#</a> 第十章 Shell 工具</h4>\n<h5 id=\"101-cut\"><a class=\"markdownIt-Anchor\" href=\"#101-cut\">#</a> 10.1 cut</h5>\n<p>cut 的工作就是 “剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。</p>\n<p>1. 基本用法</p>\n<p>cut [选项参数]  filename</p>\n<p>说明：默认分隔符是制表符</p>\n<p>2. 选项参数说明</p>\n<table>\n<thead>\n<tr>\n<th>选项参数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-f</td>\n<td>列号，提取第几列</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>分隔符，按照指定分隔符分割列</td>\n</tr>\n</tbody>\n</table>\n<p>3. 案例实操</p>\n<p>（1）数据准备</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ touch cut.txt</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ vim cut.txt</span><br><span class=\"line\">dong shen</span><br><span class=\"line\">guan zhen</span><br><span class=\"line\">wo  wo</span><br><span class=\"line\">lai  lai</span><br><span class=\"line\">le  le</span><br></pre></td></tr></table></figure>\n<p>（2）在 cut.txt 文件中切割出 guan</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ cat cut.txt | grep &quot;guan&quot; | cut -d &quot; &quot; -f 1</span><br><span class=\"line\">guan</span><br></pre></td></tr></table></figure>\n<p>（3）选取系统 PATH 变量值，第 2 个 “：” 开始后的所有路径：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ echo $PATH</span><br><span class=\"line\">/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/atguigu/bin</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop102 datas]$ echo $PATH | cut -d: -f 2-</span><br><span class=\"line\">/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/atguigu/bin</span><br></pre></td></tr></table></figure>\n<p>（4）切割 ifconfig 后打印的 IP 地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ ifconfig eth0 | grep &quot;inet addr&quot; | cut -d: -f 2 | cut -d&quot; &quot; -f1</span><br><span class=\"line\">192.168.1.102</span><br></pre></td></tr></table></figure>\n<h5 id=\"102-sed\"><a class=\"markdownIt-Anchor\" href=\"#102-sed\">#</a> 10.2 sed</h5>\n<p>sed 是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为 “模式空间”，接着用 sed 命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。</p>\n<ol>\n<li>基本用法</li>\n</ol>\n<p>sed [选项参数]  ‘command’  filename</p>\n<ol start=\"2\">\n<li>选项参数说明</li>\n</ol>\n<p>表 1-56</p>\n<table>\n<thead>\n<tr>\n<th>选项参数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-e</td>\n<td>直接在指令列模式上进行 sed 的动作编辑。</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>命令功能描述</li>\n</ol>\n<p>表 1-57</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>a</em></td>\n<td>新增，a 的后面可以接字串，在下一行出现</td>\n</tr>\n<tr>\n<td>d</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>s</td>\n<td>查找并替换</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"4\">\n<li>案例实操</li>\n</ol>\n<p>（0）数据准备</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ touch sed.txt</span><br><span class=\"line\">[atguigu@hadoop102 datas]$ vim sed.txt</span><br><span class=\"line\">dong shen</span><br><span class=\"line\">guan zhen</span><br><span class=\"line\">wo  wo</span><br><span class=\"line\">lai  lai</span><br><span class=\"line\"></span><br><span class=\"line\">le  le</span><br></pre></td></tr></table></figure>\n<p>（1）将 “mei nv” 这个单词插入到 sed.txt 第二行下，打印。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ sed &#x27;2a mei nv&#x27; sed.txt </span><br><span class=\"line\">dong shen</span><br><span class=\"line\">guan zhen</span><br><span class=\"line\">mei nv</span><br><span class=\"line\">wo  wo</span><br><span class=\"line\">lai  lai</span><br><span class=\"line\"></span><br><span class=\"line\">le  le</span><br><span class=\"line\">[atguigu@hadoop102 datas]$ cat sed.txt </span><br><span class=\"line\">dong shen</span><br><span class=\"line\">guan zhen</span><br><span class=\"line\">wo  wo</span><br><span class=\"line\">lai  lai</span><br><span class=\"line\"></span><br><span class=\"line\">le  le</span><br></pre></td></tr></table></figure>\n<p><strong>注意：文件并没有改变</strong></p>\n<p>（2）删除 sed.txt 文件所有包含 wo 的行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ sed &#x27;/wo/d&#x27; sed.txt</span><br><span class=\"line\">dong shen</span><br><span class=\"line\">guan zhen</span><br><span class=\"line\">lai  lai</span><br><span class=\"line\"></span><br><span class=\"line\">le  le</span><br></pre></td></tr></table></figure>\n<p>（3）将 sed.txt 文件中 wo 替换为 ni</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ sed &#x27;s/wo/ni/g&#x27; sed.txt </span><br><span class=\"line\">dong shen</span><br><span class=\"line\">guan zhen</span><br><span class=\"line\">ni  ni</span><br><span class=\"line\">lai  lai</span><br><span class=\"line\"></span><br><span class=\"line\">le  le</span><br></pre></td></tr></table></figure>\n<p><strong>注意：‘g’表示 global，全部替换</strong></p>\n<p>（4）将 sed.txt 文件中的第二行删除并将 wo 替换为 ni</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ sed -e &#x27;2d&#x27; -e &#x27;s/wo/ni/g&#x27; sed.txt </span><br><span class=\"line\">dong shen</span><br><span class=\"line\">ni  ni</span><br><span class=\"line\">lai  lai</span><br><span class=\"line\"></span><br><span class=\"line\">le  le</span><br></pre></td></tr></table></figure>\n<h5 id=\"103-awk\"><a class=\"markdownIt-Anchor\" href=\"#103-awk\">#</a> 10.3 awk</h5>\n<p>一个强大的文本分析工具，把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行分析处理。</p>\n<ol>\n<li>基本用法</li>\n</ol>\n<p>awk [选项参数] ‘pattern1 {action1} pattern2 {action2}…’ filename</p>\n<p>pattern：表示 AWK 在数据中查找的内容，就是匹配模式</p>\n<p>action：在找到匹配内容时所执行的一系列命令</p>\n<ol start=\"2\">\n<li>选项参数说明</li>\n</ol>\n<p>表 1-55</p>\n<table>\n<thead>\n<tr>\n<th>选项参数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-F</td>\n<td>指定输入文件折分隔符</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>赋值一个用户定义变量</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>案例实操</li>\n</ol>\n<p>（0）数据准备</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ sudo cp /etc/passwd ./</span><br></pre></td></tr></table></figure>\n<p>（1）搜索 passwd 文件以 root 关键字开头的所有行，并输出该行的第 7 列。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ awk -F: &#x27;/^root/&#123;print $7&#125;&#x27; passwd </span><br><span class=\"line\">/bin/bash</span><br></pre></td></tr></table></figure>\n<p>（2）搜索 passwd 文件以 root 关键字开头的所有行，并输出该行的第 1 列和第 7 列，中间以 “，” 号分割。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ awk -F: &#x27;/^root/&#123;print $1&quot;,&quot;$7&#125;&#x27; passwd </span><br><span class=\"line\">root,/bin/bash</span><br></pre></td></tr></table></figure>\n<p>注意：只有匹配了 pattern 的行才会执行 action</p>\n<p>（3）只显示 /etc/passwd 的第一列和第七列，以逗号分割，且在所有行前面添加列名 user，shell 在最后一行添加 &quot;dahaige，/bin/zuishuai&quot;。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ awk -F : &#x27;BEGIN&#123;print &quot;user, shell&quot;&#125; &#123;print $1&quot;,&quot;$7&#125; END&#123;print &quot;dahaige,/bin/zuishuai&quot;&#125;&#x27; passwd</span><br><span class=\"line\"></span><br><span class=\"line\">user, shell</span><br><span class=\"line\">root,/bin/bash</span><br><span class=\"line\">bin,/sbin/nologin</span><br><span class=\"line\">。。。</span><br><span class=\"line\">atguigu,/bin/bash</span><br><span class=\"line\">dahaige,/bin/zuishuai</span><br></pre></td></tr></table></figure>\n<p>注意：BEGIN 在所有数据读取行之前执行；END 在所有数据执行之后执行。</p>\n<p>（4）将 passwd 文件中的用户 id 增加数值 1 并输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ awk -v i=1 -F: &#x27;&#123;print $3+i&#125;&#x27; passwd</span><br><span class=\"line\"></span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n<ol>\n<li>awk 的内置变量</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FILENAME</td>\n<td>文件名</td>\n</tr>\n<tr>\n<td>NR</td>\n<td>已读的记录数</td>\n</tr>\n<tr>\n<td>NF</td>\n<td>浏览记录的域的个数（切割后，列的个数）</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>案例实操</li>\n</ol>\n<p>（1）统计 passwd 文件名，每行的行号，每行的列数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ awk -F: &#x27;&#123;print &quot;filename:&quot;  FILENAME &quot;, linenumber:&quot; NR  &quot;,columns:&quot; NF&#125;&#x27; passwd </span><br><span class=\"line\"></span><br><span class=\"line\">filename:passwd, linenumber:1,columns:7</span><br><span class=\"line\">filename:passwd, linenumber:2,columns:7</span><br><span class=\"line\">filename:passwd, linenumber:3,columns:7</span><br></pre></td></tr></table></figure>\n<p>​\t （2）切割 IP</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ ifconfig eth0 | grep &quot;inet addr&quot; | awk -F: &#x27;&#123;print $2&#125;&#x27; | awk -F &quot; &quot; &#x27;&#123;print $1&#125;&#x27; </span><br><span class=\"line\">192.168.1.102</span><br></pre></td></tr></table></figure>\n<p>​\t （3）查询 sed.txt 中空行所在的行号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ awk &#x27;/^$/&#123;print NR&#125;&#x27; sed.txt </span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n<h5 id=\"104-sort\"><a class=\"markdownIt-Anchor\" href=\"#104-sort\">#</a> 10.4 sort</h5>\n<p>sort 命令是在 Linux 里非常有用，它将文件进行排序，并将排序结果标准输出。</p>\n<ol>\n<li>基本语法</li>\n</ol>\n<p>sort (选项)(参数)</p>\n<p>表 1-57</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-n</td>\n<td>依照数值的大小排序</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>以相反的顺序来排序</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>设置排序时所用的分隔字符</td>\n</tr>\n<tr>\n<td>-k</td>\n<td>指定需要排序的列</td>\n</tr>\n</tbody>\n</table>\n<p>参数：指定待排序的文件列表</p>\n<ol start=\"2\">\n<li>案例实操</li>\n</ol>\n<p>（0）数据准备</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ touch sort.sh</span><br><span class=\"line\">[atguigu@hadoop102 datas]$ vim sort.sh </span><br><span class=\"line\"></span><br><span class=\"line\">bb:40:5.4</span><br><span class=\"line\">bd:20:4.2</span><br><span class=\"line\">xz:50:2.3</span><br><span class=\"line\">cls:10:3.5</span><br><span class=\"line\">ss:30:1.6</span><br></pre></td></tr></table></figure>\n<p>（1）按照 “：” 分割后的第三列倒序排序。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ sort -t : -nrk 3  sort.sh </span><br><span class=\"line\">bb:40:5.4</span><br><span class=\"line\">bd:20:4.2</span><br><span class=\"line\">cls:10:3.5</span><br><span class=\"line\">xz:50:2.3</span><br><span class=\"line\">ss:30:1.6</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "大数据技术"
            ]
        },
        {
            "id": "https://wmingchong.github.io/2023/02/21/suibi/hello-world/",
            "url": "https://wmingchong.github.io/2023/02/21/suibi/hello-world/",
            "title": "随笔",
            "date_published": "2023-02-21T02:12:45.000Z",
            "content_html": "<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": [
                "哈哈"
            ]
        },
        {
            "id": "https://wmingchong.github.io/2023/02/13/qita/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/",
            "url": "https://wmingchong.github.io/2023/02/13/qita/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/",
            "title": "Lambda架构",
            "date_published": "2023-02-13T02:08:12.000Z",
            "content_html": "<h2 id=\"lambda架构\"><a class=\"markdownIt-Anchor\" href=\"#lambda架构\">#</a> lambda 架构</h2>\n<ul>\n<li>离线计算和实时计算提供服务的问题</li>\n<li>离线计算的有缺点：\n<ul>\n<li>优点：能够处理的数据量可以很大，比如 pb 级别</li>\n<li>缺点：速度比较慢，分钟级别的延迟</li>\n</ul>\n</li>\n<li>实时计算\n<ul>\n<li>优点：响应快，来一条数据处理一条， ms 级别的响应</li>\n<li>缺点：处理的数据量小</li>\n</ul>\n</li>\n<li>离线计算框架\n<ul>\n<li>hadoop</li>\n<li>spark core， spark SQL</li>\n<li>hive</li>\n</ul>\n</li>\n<li>实时计算框架\n<ul>\n<li>spark streaming</li>\n<li>storm</li>\n<li>flink</li>\n</ul>\n</li>\n<li>消息中间价\n<ul>\n<li>flume 日志采集系统</li>\n<li>kafka 消息队列</li>\n</ul>\n</li>\n<li>存储相关\n<ul>\n<li>hbase nosql 数据库</li>\n<li>hive sql 操作 hdfs 数据</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"推荐算法架构\"><a class=\"markdownIt-Anchor\" href=\"#推荐算法架构\">#</a> 推荐算法架构</h2>\n<ul>\n<li>找回 ——》排序 ——》策略调整</li>\n</ul>\n<h3 id=\"推荐系统构建模型\"><a class=\"markdownIt-Anchor\" href=\"#推荐系统构建模型\">#</a> 推荐系统构建模型</h3>\n<ul>\n<li>数据收集\n<ul>\n<li>显性评分</li>\n<li>隐性评分</li>\n</ul>\n</li>\n<li>特征工程\n<ul>\n<li>协同过滤：用户 - 物品矩阵</li>\n<li>基于内容：分词 tf-idf word2Vec</li>\n</ul>\n</li>\n<li>模型训练\n<ul>\n<li>协同过滤\n<ul>\n<li>kNN</li>\n<li>矩阵分解</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>评估、模型上线</li>\n</ul>\n<h3 id=\"协同过滤思路介绍\"><a class=\"markdownIt-Anchor\" href=\"#协同过滤思路介绍\">#</a> 协同过滤思路介绍</h3>\n<ul>\n<li>CF 物以类聚，人以群分</li>\n<li>做系统过滤的话，首先特征工程把 用户 - 物品的评分矩阵创建出来</li>\n<li>基于用户的协同过滤\n<ul>\n<li>给用户 A 找到最相似的 N 个用户</li>\n<li>N 个用户消费过哪些物品</li>\n<li>N 个用户消费过的物品中减去 A 用户消费过的就是推荐结果</li>\n</ul>\n</li>\n<li>基于物品的协同过滤\n<ul>\n<li>给物品 A 找到最相似的 N 个物品</li>\n<li>A 用户消费记录 找到这些物品的相似物品</li>\n<li>从这些相似物品先去重减去 A 用户消费过的就是推荐结果</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"相似度计算\"><a class=\"markdownIt-Anchor\" href=\"#相似度计算\">#</a> 相似度计算</h3>\n<ul>\n<li>余弦相似度、皮尔逊相关系数\n<ul>\n<li>向量的夹角余弦值</li>\n<li>皮尔逊会对向量的每一个分量做中心化</li>\n<li>余弦只考虑方向 不考虑向量长度</li>\n<li>如果评分数据是连续的数值比较适合中余弦，皮尔逊算相似度</li>\n</ul>\n</li>\n<li>杰卡德相似度\n<ul>\n<li>交集 / 并集</li>\n<li>计算评分是 0 1 布尔值的相似度</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"基于模型的算法\"><a class=\"markdownIt-Anchor\" href=\"#基于模型的算法\">#</a> 基于模型的算法</h3>\n<ul>\n<li>用户矩阵比较稀疏的时候 ，直接去取物品的向量 用户向量计算相似度不太合适</li>\n<li>基于，模型的方法可以解决用户矩阵 物品矩阵比较稀疏的问题</li>\n<li>矩阵分解：\n<ul>\n<li>把大的矩阵分解成两个比较小的 用户矩阵 物品矩阵</li>\n<li>大矩阵约等于 用户矩阵 乘 物品矩阵</li>\n<li>使用 als 交替最小二乘法优化损失</li>\n<li>优化之后的用户矩阵 取出用户向量</li>\n<li>优化之后的物品矩阵 取出物品向量</li>\n<li>用户向量点乘物品向量 得到最终的评分预测</li>\n</ul>\n</li>\n<li>EE\n<ul>\n<li>Exploitation &amp; Explortation 探索与利用问题</li>\n<li>Exploition 利用用户的历史行为 只给他看曾经看过的 / 消费过的</li>\n<li>Explortation （探测 搜索）发现用户的新兴趣</li>\n<li>ee 问题实际上是矛盾的</li>\n</ul>\n</li>\n<li>评估手段\n<ul>\n<li>离线评估和在线评估结合，定期做问卷调查\n<ul>\n<li>在线评估：灰度发布 &amp; A/B 测试</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"推荐系统的冷启动\"><a class=\"markdownIt-Anchor\" href=\"#推荐系统的冷启动\">#</a> 推荐系统的冷启动</h3>\n<ul>\n<li>用户冷启动\n<ul>\n<li>尽可能收集用户信息 构建用户画像（打标签</li>\n<li>根据用户的标签可以做人群类聚 用户已有的用户的行为做推荐</li>\n<li>更多的使用流行度对剑</li>\n</ul>\n</li>\n<li>物品冷启动\n<ul>\n<li>物品打标签 构建物品画像</li>\n<li>基于内容的推荐</li>\n</ul>\n</li>\n<li>系统冷启动\n<ul>\n<li>如果应用缺少用户行为数据 -》基于内容的推荐</li>\n<li>随着用户行为积累的越来越多 -》协同过滤</li>\n<li>基于内容和协同过滤共同工作</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"基于内容的推荐\"><a class=\"markdownIt-Anchor\" href=\"#基于内容的推荐\">#</a> 基于内容的推荐</h3>\n<ul>\n<li>\n<p>给物品打标签</p>\n<ul>\n<li>系统自己提取从业务数据库中提取</li>\n<li>用户填写</li>\n<li>中文分词 利用算法计算词的权重</li>\n</ul>\n</li>\n<li>\n<p>利用标签的文字 转换成词向量</p>\n<ul>\n<li>word2Vec 词 -》向量</li>\n<li>用向量来表示语义</li>\n<li>如果两个词的词向量相似度比较高 认为这两个词的语义相近</li>\n</ul>\n</li>\n<li>\n<p>利用词向量 构建物品的向量</p>\n<ul>\n<li>一个物品有 N 个关键词，一个关键词对应一个语义</li>\n<li>求和（权重 * 词向量）/N</li>\n<li>利用 N 个关键词的词向量获取物品的向量</li>\n</ul>\n</li>\n<li>\n<p>通过物品计算相似度</p>\n<ul>\n<li>皮尔逊 相关系数 计算物品向量的相似度</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"基于内容的推荐-2\"><a class=\"markdownIt-Anchor\" href=\"#基于内容的推荐-2\">#</a> 基于内容的推荐</h3>\n<ul>\n<li>content_based: 词向量 ——》物品向量 ——》计算相似度</li>\n<li>item_based cf：user_item matrix——》物品向量 ——》相似度</li>\n<li>区别\n<ul>\n<li>物品向量构建过程有区别</li>\n<li>基于内容的推荐\n<ul>\n<li>物品向量 文本（物品描述信息， 系统填标签，用户填标签）</li>\n</ul>\n</li>\n<li>基于物品的推荐\n<ul>\n<li>用户对物品的评分矩阵 用户的行为数据中来</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"baseline基准预测\"><a class=\"markdownIt-Anchor\" href=\"#baseline基准预测\">#</a> Baseline：基准预测</h3>\n<ul>\n<li>所有物品的评分平均值</li>\n<li>找到每一个用户对物品的平均评分的 bias bu</li>\n<li>找到每一个物品对平均评分 bias bi</li>\n<li>预测的得分 mean+bu+bi u 代表第 u 个用户 i 代表第 i 个物品</li>\n<li>可以使用梯度下降来优化损失</li>\n</ul>\n<h3 id=\"矩阵分解\"><a class=\"markdownIt-Anchor\" href=\"#矩阵分解\">#</a> 矩阵分解</h3>\n<ul>\n<li>SVD 奇异值分解\n<ul>\n<li>一个大矩阵 分成 3 个小矩阵 中间是一个 k 方阵</li>\n<li>SVD 只适用于没有缺失值 必须是稠密矩阵</li>\n</ul>\n</li>\n<li>Funk SVD\n<ul>\n<li>一个大的矩阵分成两个小矩阵</li>\n<li>LFM 原理</li>\n</ul>\n</li>\n<li>BiasSVD 矩阵分解 + baseline</li>\n<li>SVD++ 矩阵分解 + baseline + 其他影响（点击、收藏、购买）</li>\n</ul>\n<h3 id=\"基于内容的推荐-3\"><a class=\"markdownIt-Anchor\" href=\"#基于内容的推荐-3\">#</a> 基于内容的推荐</h3>\n<ul>\n<li>画像构建给用户、物品打标签\n<ul>\n<li>物品画像\n<ul>\n<li>分类信息</li>\n<li>标题</li>\n<li>电影、音乐、主演。。</li>\n</ul>\n</li>\n<li>用户画像\n<ul>\n<li>喜好的物品类别、行为偏好</li>\n<li>基本人口学属性</li>\n<li>活跃程度</li>\n<li>风控维度</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>PGC 应用自己生成</li>\n<li>UGC 用户生成</li>\n<li>基于内容推荐的算法流程\n<ul>\n<li>用户画像、物品画像</li>\n<li>匹配用户画像、物品画像</li>\n</ul>\n</li>\n<li>物品冷启动问题\n<ul>\n<li>画像 -&gt; 词向量 -&gt; 物品向量 -&gt; 计算物品相似度</li>\n<li>从文本描述的角度找相似的物品</li>\n<li>当用户在浏览 A 的时候，通过上述套路找到跟物品 A 相似的一系列物品</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "推荐系统"
            ]
        },
        {
            "id": "https://wmingchong.github.io/2023/02/12/qita/SQL%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E5%87%BD%E6%95%B0/",
            "url": "https://wmingchong.github.io/2023/02/12/qita/SQL%E5%85%B3%E9%94%AE%E5%AD%97%E5%92%8C%E5%87%BD%E6%95%B0/",
            "title": "SQL关键字和函数",
            "date_published": "2023-02-12T01:08:12.000Z",
            "content_html": "<h3 id=\"sql关键字以及函数\"><a class=\"markdownIt-Anchor\" href=\"#sql关键字以及函数\">#</a> SQL 关键字以及函数</h3>\n<h4 id=\"sql中的开窗口函数over\"><a class=\"markdownIt-Anchor\" href=\"#sql中的开窗口函数over\">#</a> SQL 中的开窗口函数 OVER ()</h4>\n<p><strong>定义</strong>：OVER 用于为行定义一个窗口，它对一组值进行操作，不需要使用 GROUP BY 子句对数据进行分组，能够在同一行中同时返回基础行的列和聚合列。</p>\n<blockquote>\n<p><strong>语法</strong>：OVER ([ PARTITION BY column] [ ORDER BY culumn ] )</p>\n</blockquote>\n<p><strong>用法</strong>：OVER 开窗函数必须与聚合函数或排序函数一起使用，聚合函数一般指 SUM (),MAX (),MIN,COUNT (),AVG () 等常见函数。排序函数一般指 RANK (),ROW_NUMBER (),DENSE_RANK (),NTILE () 等。</p>\n<blockquote>\n<p><strong>拓展</strong>：PARTITION BY 子句进行分组；ORDER BY 子句进行排序。</p>\n</blockquote>\n<h4 id=\"sql中的窗口函数\"><a class=\"markdownIt-Anchor\" href=\"#sql中的窗口函数\">#</a> SQL 中的窗口函数</h4>\n<blockquote>\n<p>first_value： 用来返回一个分组窗口里的第一行记录，也即排名第一的那行记录。</p>\n</blockquote>\n<blockquote>\n<p>last_value： 和 first_value 相反，用来返回分组窗口里的最后一行记录，也即倒数第一的那行记录。</p>\n</blockquote>\n<blockquote>\n<p>nth_value： 用来返回分组内指定行的记录。</p>\n</blockquote>\n<blockquote>\n<p>ntile： 用来在分组内继续二次分组。</p>\n</blockquote>\n<blockquote>\n<p>ROW_NUMBER ()：当前行在其分组内的序号。不管其排序结果中是否出现重复值。其排序结果都为：1,2.3.4.5.。顺序排序 ——1、2、3</p>\n</blockquote>\n<blockquote>\n<p>DENSE_RANK ()：不间断的组内排序。使用这个函数时，可以出现 1.1.2.2 这种形式的分组。并列排序，不跳过重复序号 ——1、1、2</p>\n</blockquote>\n<blockquote>\n<p>RANK ()：间断的组内排序。其排序结果可能出现如下结果：1.1.3.4.4.6。并列排序，跳过重复序号 ——1、1、3</p>\n</blockquote>\n<h4 id=\"sql中的日期函数date_add\"><a class=\"markdownIt-Anchor\" href=\"#sql中的日期函数date_add\">#</a> SQL 中的日期函数 DATE_ADD ()</h4>\n<p>date_add ()：常常用户在 mysql 的 sql 中实现对日期类型的操作，比如增加或者减少，但是不改变原来的数据，只是对查询的数据做处理</p>\n<blockquote>\n<p>语法：DATE_ADD (date,INTERVAL expr unit)</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 得到当前时间增加1天的结果</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> date_add(now(),<span class=\"type\">interval</span> <span class=\"number\">1</span> <span class=\"keyword\">day</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 得到当前时间减少72个小时的结果</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> date_add(now(),<span class=\"type\">interval</span> <span class=\"number\">-72</span> <span class=\"keyword\">hour</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"sql中的union\"><a class=\"markdownIt-Anchor\" href=\"#sql中的union\">#</a> SQL 中的 union</h4>\n<p>作用：将两张毫不相干的表的查询结果拼接在一起输出，前提是两个查询的列数要相同。</p>\n<h4 id=\"sql中的round\"><a class=\"markdownIt-Anchor\" href=\"#sql中的round\">#</a> SQL 中的 ROUND ()</h4>\n<p>round () 函数用于把<strong>数值字段</strong>舍入为指定的小数位数</p>\n<blockquote>\n<p>语法：SELECT ROUND (column_name,decimals) FROM [表名]</p>\n<p>column_name: 要舍入的字段，必需</p>\n<p>decimals: 规定要返回的小数位数，可选</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- ROUND(X)函数将值X四舍五入之后保留整数部分</span></span><br><span class=\"line\"><span class=\"comment\">-- -7</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> ROUND(<span class=\"number\">-6.6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 1100</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> ROUND(<span class=\"number\">1123.26723</span>,<span class=\"number\">-2</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 1000</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> ROUND(<span class=\"number\">1123.26723</span>,<span class=\"number\">-3</span>);</span><br><span class=\"line\"><span class=\"comment\">-- 根据参数D值，将参数X四舍五入后得到保留小数点后D位的值，X值的小数位不够D位的补零</span></span><br><span class=\"line\"><span class=\"comment\">-- 如果D为负值，则保留小数点左边D位，先进行四舍五入操作，再将相应的位数值取零</span></span><br><span class=\"line\"><span class=\"comment\">-- -6.7</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> ROUND(<span class=\"number\">-6.66</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"sql中的日期格式化函数date_format\"><a class=\"markdownIt-Anchor\" href=\"#sql中的日期格式化函数date_format\">#</a> SQL 中的日期格式化函数 date_format ()</h4>\n<p>date_format 函数用于格式化日期字段。</p>\n<blockquote>\n<p>语法：DATE_FORMAT (date, format)</p>\n<p>date 为日期字段，format 为格式化字符串。常用的格式化字符有 % Y、% m、% d 等</p>\n</blockquote>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 这将返回日期字段按照“年-月-日”格式格式化后的结果。</span></span><br><span class=\"line\"><span class=\"keyword\">SELECT</span> DATE_FORMAT(date_field, <span class=\"string\">&#x27;%Y-%m-%d&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">-- 需要注意的是，在使用 date_format 函数时，date 字段需要是日期类型的，如果是字符串类型的日期需要使用str_to_date函数转换成日期类型。</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> DATE_FORMAT(str_to_date(<span class=\"string\">&#x27;2022-10-01&#x27;</span>,<span class=\"string\">&#x27;%Y-%m-%d&#x27;</span>),<span class=\"string\">&#x27;%Y-%m-%d %T&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">-- 这将返回字符串类型 &#x27;2022-10-01&#x27; 转换成日期类型后的结果，并按照 &#x27;%Y-%m-%d %T&#x27;格式输出。</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "SQL"
            ]
        },
        {
            "id": "https://wmingchong.github.io/2022/12/24/jichu/MarkDown/",
            "url": "https://wmingchong.github.io/2022/12/24/jichu/MarkDown/",
            "title": "Markdown使用指南",
            "date_published": "2022-12-24T04:10:45.000Z",
            "content_html": "<h1 id=\"markdown学习\"><a class=\"markdownIt-Anchor\" href=\"#markdown学习\">#</a> MarkDown 学习</h1>\n<h2 id=\"标题\"><a class=\"markdownIt-Anchor\" href=\"#标题\">#</a> 标题</h2>\n<h3 id=\"三级标题\"><a class=\"markdownIt-Anchor\" href=\"#三级标题\">#</a> 三级标题</h3>\n<h4 id=\"四级标题\"><a class=\"markdownIt-Anchor\" href=\"#四级标题\">#</a> 四级标题</h4>\n<p>层级标题的快捷方式由  <strong>#+ 空格 + 标题名称</strong>  表示，回车键显示。</p>\n<p>一级标题用一个 <strong>#</strong></p>\n<p>二级标题用两个 <strong>##</strong></p>\n<p>以此类推，Typora 最高只能由六个层级标题</p>\n<h2 id=\"字体\"><a class=\"markdownIt-Anchor\" href=\"#字体\">#</a> 字体</h2>\n<p><strong>严于律己，宽以待人</strong></p>\n<p><em>严于律己，宽以待人</em></p>\n<p><em><strong>严于律己，宽以待人</strong></em></p>\n<p><s>严于律己，宽以待人</s></p>\n<p>在两端加上 * 号，用一个 * 表示斜体；两个  * 表示黑体；三个 *** 表示黑体和斜体的组合。</p>\n<p>在两端加上两个 <strong>~~</strong> 表示删除线</p>\n<h2 id=\"引用\"><a class=\"markdownIt-Anchor\" href=\"#引用\">#</a> 引用</h2>\n<blockquote>\n<p>好好学习，天天向上</p>\n</blockquote>\n<p>用英文状态的  <strong>&gt;+ 空格</strong>  表示</p>\n<h2 id=\"分割线\"><a class=\"markdownIt-Anchor\" href=\"#分割线\">#</a> 分割线</h2>\n<hr>\n<hr>\n<p>分割线有两种表示方式</p>\n<p>用三个 <strong>—</strong> 回车表示；用三个 *** 回车表示</p>\n<h2 id=\"图片\"><a class=\"markdownIt-Anchor\" href=\"#图片\">#</a> 图片</h2>\n<p><img data-src=\"E:%5Cmodule%5CGit%5Csource_posts%5Cjichu%5C%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87%5CMarkDown%5Cwallhaven-weeqzx.jpg\" alt=\"no1\"></p>\n<p>图片用  <strong>![图片名] (图片路径)</strong> 来表示</p>\n<h2 id=\"超链接\"><a class=\"markdownIt-Anchor\" href=\"#超链接\">#</a> 超链接</h2>\n<p><a href=\"www.baidu.com\">点击跳转到百度</a></p>\n<p>超链接用 <strong>[文字] (超链接地址)</strong>  表示</p>\n<h2 id=\"列表\"><a class=\"markdownIt-Anchor\" href=\"#列表\">#</a> 列表</h2>\n<ol>\n<li>好好</li>\n<li>学习</li>\n</ol>\n<ul>\n<li>天天</li>\n<li>向上</li>\n</ul>\n<p>有序列表用  <strong>1. + 空格</strong> 表示</p>\n<p>无序列表用   <strong>- + 空格</strong> 表示</p>\n<h2 id=\"表格\"><a class=\"markdownIt-Anchor\" href=\"#表格\">#</a> 表格</h2>\n<p>名字 | 性别 | 年龄</p>\n<p>–|--|–|</p>\n<p>张三 | 男 | 12</p>\n<p>在源代码模式中将空格删除，退出源代码模式即可</p>\n<table>\n<thead>\n<tr>\n<th>名字</th>\n<th>性别</th>\n<th>年龄</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>张三</td>\n<td>男</td>\n<td>12</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"代码\"><a class=\"markdownIt-Anchor\" href=\"#代码\">#</a> 代码</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hello</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello World&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>代码写法由  <strong>```</strong>  回车表示，也可以加上代码类型再回车。</p>\n<p><span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEBnaXRodWIuY29t\">git@github.com</span>:wmingchong/wmignchong.github.io.git</p>\n",
            "tags": [
                "MarkDown基础"
            ]
        },
        {
            "id": "https://wmingchong.github.io/2022/12/23/BigData/k8s/",
            "url": "https://wmingchong.github.io/2022/12/23/BigData/k8s/",
            "title": "Kubernetes",
            "date_published": "2022-12-23T07:21:22.000Z",
            "content_html": "<h1 id=\"kubernetes\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes\">#</a> Kubernetes</h1>\n<h2 id=\"概述\"><a class=\"markdownIt-Anchor\" href=\"#概述\">#</a> 概述</h2>\n<ul>\n<li>\n<p>Kubernetes 这个名字源于希腊语，意为 “舵手” 或 “飞行员”。k8s 这个缩写是因为 k 到 s 中间有 8 个字符的关系。</p>\n</li>\n<li>\n<p>Kubernetes 是一个可移植、可扩展的开源平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化。Kubernetes 拥有一个庞大且快速增生的生态，其服务、支持和工具的使用范围相当广泛。</p>\n</li>\n</ul>\n<h3 id=\"为什么需要kubernetes\"><a class=\"markdownIt-Anchor\" href=\"#为什么需要kubernetes\">#</a> 为什么需要 Kubernetes</h3>\n<p>容器是打包和运行应用程序的好方式，在生产环境中，你需要管理应用程序的容器，并确保不会下线，一旦一个容器发生故障，则需要启动另一个容器，而 k8s 为你提供一个可弹性运行分布式系统的框架，从而满足你的扩展要求，故障转移你的应用、提供部署模式等。</p>\n<p>kubernetes 可以提供：</p>\n<ul>\n<li>\n<p><strong>服务发现和负载均衡</strong></p>\n<p>k8s 可以使用 DNS 名称或自己的 IP 来暴露容器。如果进入容器的流量很大，k8s 可以负载均衡并分配网络流量，从而使部署稳定。</p>\n</li>\n<li>\n<p><strong>存储编排</strong></p>\n<p>k8s 允许你自动挂载你选择的存储系统，例如本地存储，公共云提供商等</p>\n</li>\n<li>\n<p><strong>自动部署和回滚</strong></p>\n<p>你可以使用 kubernetes 描述已部署容器的所需状态，它可以以受控的速率将实际状态更改为期望状态。</p>\n</li>\n<li>\n<p><strong>自动完成装箱计算</strong></p>\n<p>你为 Kubernetes 提供许多节点组成的集群，在这个集群上运行容器化的任务。你告诉 Kubernetes 每个容器需要多少 CPU 和内存 (RAM)。Kubernetes 可以将这些容器按实际情况调度到你的节点上，以最佳方式利用你的资源。</p>\n</li>\n<li>\n<p><strong>自我修复</strong></p>\n<p>kubernetes 将重新启动失败的容器、替换容器、杀死不响应用户定义的运行状况检查的容器，并且在准备好服务之前不将其通告给客户端。</p>\n</li>\n<li>\n<p><strong>密钥与配置管理</strong></p>\n<p>Kubernetes 允许你存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥。你可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥。</p>\n</li>\n</ul>\n<h3 id=\"kubernetes组件\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes组件\">#</a> Kubernetes 组件</h3>\n<p><em><strong>控制平面组件（Control Plane Components）</strong></em></p>\n<ul>\n<li>\n<p><strong> <code>kube-apiserver</code> </strong>:API 服务器是 Kubernetes 控制平面的组件， 该组件负责公开了 Kubernetes API，负责处理接受请求的工作。 API 服务器是 Kubernetes 控制平面的前端。</p>\n</li>\n<li>\n<p><strong> <code>etcd</code> </strong>: 是兼顾一致性与高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。</p>\n<p>你的 Kubernetes 集群的 etcd 数据库通常需要有个备份计划。</p>\n</li>\n<li>\n<p><strong> <code>kube-scheduler</code> </strong>:kube-scheduler 是控制平面的组件， 负责监视新创建的、未指定运行节点（node）的 Pods， 并选择节点来让 Pod 在上面运行。</p>\n</li>\n<li>\n<p><strong> <code>kube-controller-manager</code> </strong>: 是控制平面的组件， 负责运行控制器进程。</p>\n<p>从逻辑上讲， 每个控制器都是一个单独的进程， 但是为了降低复杂性，它们都被编译到同一个可执行文件，并在同一个进程中运行。</p>\n</li>\n<li>\n<p><strong> <code>Cloud Controller Manager</code> </strong>: 一个 Kubernetes 控制平面组件， 嵌入了特定于云平台的控制逻辑。 云控制器管理器（Cloud Controller Manager）允许你将你的集群连接到云提供商的 API 之上， 并将与该云平台交互的组件同与你的集群交互的组件分离开来。</p>\n</li>\n</ul>\n<p><em><strong>Node 组件</strong></em></p>\n<ul>\n<li>\n<p><strong> <code>kubelet</code> </strong>：kubelet 会在集群中每个节点（node）上运行。 它保证容器（containers）都运行在 Pod 中。</p>\n<p>kubelet 接收一组通过各类机制提供给它的 PodSpecs， 确保这些 PodSpecs 中描述的容器处于运行状态且健康。 kubelet 不会管理不是由 Kubernetes 创建的容器。</p>\n</li>\n<li>\n<p><strong> <code>kube-proxy</code> </strong>：是集群中每个节点（node）所上运行的网络代理， 实现 Kubernetes 服务（Service） 概念的一部分。</p>\n<p>kube-proxy 维护节点上的一些网络规则， 这些网络规则会允许从集群内部或外部的网络会话与 Pod 进行网络通信。</p>\n<p>如果操作系统提供了可用的数据包过滤层，则 kube-proxy 会通过它来实现网络规则。 否则，kube-proxy 仅做流量转发。</p>\n</li>\n</ul>\n<h2 id=\"部署k8s集群\"><a class=\"markdownIt-Anchor\" href=\"#部署k8s集群\">#</a> 部署 k8s 集群</h2>\n<h3 id=\"1安装好docker\"><a class=\"markdownIt-Anchor\" href=\"#1安装好docker\">#</a> 1. 安装好 Docker</h3>\n<h3 id=\"2安装kubeadm\"><a class=\"markdownIt-Anchor\" href=\"#2安装kubeadm\">#</a> 2. 安装 Kubeadm</h3>\n<ul>\n<li><strong>1. 基础环境</strong></li>\n</ul>\n<blockquote>\n<p>所有机器执行</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#各个机器设置自己的域名</span></span><br><span class=\"line\">hostnamectl set-hostname xxxx</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 SELinux 设置为 permissive 模式（相当于将其禁用）</span></span><br><span class=\"line\">sudo setenforce 0</span><br><span class=\"line\">sudo sed -i <span class=\"string\">&#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27;</span> /etc/selinux/config</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#关闭swap</span></span><br><span class=\"line\">swapoff -a  </span><br><span class=\"line\">sed -ri <span class=\"string\">&#x27;s/.*swap.*/#&amp;/&#x27;</span> /etc/fstab</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#允许 iptables 检查桥接流量</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF | sudo tee /etc/modules-load.d/k8s.conf</span></span><br><span class=\"line\"><span class=\"string\">br_netfilter</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF | sudo tee /etc/sysctl.d/k8s.conf</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-ip6tables = 1</span></span><br><span class=\"line\"><span class=\"string\">net.bridge.bridge-nf-call-iptables = 1</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">sudo sysctl --system</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>2.<strong> 安装 Kubelet、Kubeadm、Kubectl</strong></li>\n</ul>\n<blockquote>\n<p>每台机器都执行</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF | sudo tee /etc/yum.repos.d/kubernetes.repo</span></span><br><span class=\"line\"><span class=\"string\">[kubernetes]</span></span><br><span class=\"line\"><span class=\"string\">name=Kubernetes</span></span><br><span class=\"line\"><span class=\"string\">baseurl=http://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span></span><br><span class=\"line\"><span class=\"string\">enabled=1</span></span><br><span class=\"line\"><span class=\"string\">gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">repo_gpgcheck=0</span></span><br><span class=\"line\"><span class=\"string\">gpgkey=http://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">   http://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span></span><br><span class=\"line\"><span class=\"string\">exclude=kubelet kubeadm kubectl</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sudo yum install -y kubelet-1.20.9 kubeadm-1.20.9 kubectl-1.20.9 --disableexcludes=kubernetes</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> --now kubelet</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>kubelet 现在每隔几秒就会重启，因为它陷入了一个等待 kubeadm 指令的死循环</p>\n</blockquote>\n<h3 id=\"3使用kubeadm引导集群\"><a class=\"markdownIt-Anchor\" href=\"#3使用kubeadm引导集群\">#</a> 3. 使用 Kubeadm 引导集群</h3>\n<ul>\n<li><strong>1. 下载各个机器所需要的镜像</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">tee</span> ./images.sh &lt;&lt;-<span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#!/bin/bash</span></span><br><span class=\"line\">images=(</span><br><span class=\"line\">kube-apiserver:v1.20.9</span><br><span class=\"line\">kube-proxy:v1.20.9</span><br><span class=\"line\">kube-controller-manager:v1.20.9</span><br><span class=\"line\">kube-scheduler:v1.20.9</span><br><span class=\"line\">coredns:1.7.0</span><br><span class=\"line\">etcd:3.4.13-0</span><br><span class=\"line\">pause:3.2</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">for</span> imageName <span class=\"keyword\">in</span> <span class=\"variable\">$&#123;images[@]&#125;</span> ; <span class=\"keyword\">do</span></span><br><span class=\"line\">docker pull registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/<span class=\"variable\">$imageName</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\">EOF</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"built_in\">chmod</span> +x ./images.sh &amp;&amp; ./images.sh</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>2. 初始化主节点</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#所有机器添加master域名映射，以下需要修改为自己的</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;172.31.0.2  cluster-endpoint&quot;</span> &gt;&gt; /etc/hosts</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#主节点初始化</span></span><br><span class=\"line\">kubeadm init \\</span><br><span class=\"line\">--apiserver-advertise-address=172.31.0.2 \\</span><br><span class=\"line\">--control-plane-endpoint=cluster-endpoint \\</span><br><span class=\"line\">--image-repository registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images \\</span><br><span class=\"line\">--kubernetes-version v1.20.9 \\</span><br><span class=\"line\">--service-cidr=10.96.0.0/16 \\</span><br><span class=\"line\">--pod-network-cidr=192.168.0.0/16</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#所有网络范围不重叠</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>一些简单的 kubectl 命令</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#查看集群所有节点</span></span><br><span class=\"line\">kubectl get nodes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#根据配置文件，给集群创建资源</span></span><br><span class=\"line\">kubectl apply -f xxxx.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看集群部署了哪些应用？</span></span><br><span class=\"line\">docker ps   ===   kubectl get pods -A</span><br><span class=\"line\"><span class=\"comment\"># 运行中的应用在docker里面叫容器，在k8s里面叫Pod</span></span><br><span class=\"line\">kubectl get pods -A</span><br></pre></td></tr></table></figure>\n<h3 id=\"4初始化后根据提示进行操作\"><a class=\"markdownIt-Anchor\" href=\"#4初始化后根据提示进行操作\">#</a> 4. 初始化后根据提示进行操作</h3>\n<blockquote>\n<p>下面是主节点初始化之后所给出的后续操作提示，除了提示在 node 节点运行，其他都在 master 节点执行</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Your Kubernetes control-plane has initialized successfully!</span><br><span class=\"line\"></span><br><span class=\"line\">To start using your cluster, you need to run the following as a regular user:</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">  sudo <span class=\"built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">  sudo <span class=\"built_in\">chown</span> $(<span class=\"built_in\">id</span> -u):$(<span class=\"built_in\">id</span> -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\"></span><br><span class=\"line\">Alternatively, <span class=\"keyword\">if</span> you are the root user, you can run:</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">export</span> KUBECONFIG=/etc/kubernetes/admin.conf</span><br><span class=\"line\"></span><br><span class=\"line\">You should now deploy a pod network to the cluster.</span><br><span class=\"line\">Run <span class=\"string\">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:</span><br><span class=\"line\">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class=\"line\"></span><br><span class=\"line\">You can now <span class=\"built_in\">join</span> any number of control-plane nodes by copying certificate authorities</span><br><span class=\"line\">and service account keys on each node and <span class=\"keyword\">then</span> running the following as root:</span><br><span class=\"line\"></span><br><span class=\"line\">  kubeadm <span class=\"built_in\">join</span> cluster-endpoint:6443 --token 2g3c5s.fkdy4jkh3npjma1g \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:9f45cf5a17fa96087e7a708ab0234c0d6851aa6bc3ffe98fe7d5b282d3810664 \\</span><br><span class=\"line\">    --control-plane </span><br><span class=\"line\"></span><br><span class=\"line\">Then you can <span class=\"built_in\">join</span> any number of worker nodes by running the following on each as root:</span><br><span class=\"line\"></span><br><span class=\"line\">kubeadm <span class=\"built_in\">join</span> cluster-endpoint:6443 --token 2g3c5s.fkdy4jkh3npjma1g \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:9f45cf5a17fa96087e7a708ab0234c0d6851aa6bc3ffe98fe7d5b282d3810664 </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>1. 设置.kube/config</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> -p <span class=\"variable\">$HOME</span>/.kube</span><br><span class=\"line\">sudo <span class=\"built_in\">cp</span> -i /etc/kubernetes/admin.conf <span class=\"variable\">$HOME</span>/.kube/config</span><br><span class=\"line\">sudo <span class=\"built_in\">chown</span> $(<span class=\"built_in\">id</span> -u):$(<span class=\"built_in\">id</span> -g) <span class=\"variable\">$HOME</span>/.kube/config</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>安装网络组件</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://docs.projectcalico.org/manifests/calico.yaml -O</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl apply -f calico.yaml</span><br></pre></td></tr></table></figure>\n<h3 id=\"5加入node节点\"><a class=\"markdownIt-Anchor\" href=\"#5加入node节点\">#</a> 5. 加入 node 节点</h3>\n<blockquote>\n<p>在 node 节点上执行，在上面提示中，根据自己的提示添加</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm <span class=\"built_in\">join</span> cluster-endpoint:6443 --token 2g3c5s.fkdy4jkh3npjma1g \\</span><br><span class=\"line\">    --discovery-token-ca-cert-hash sha256:9f45cf5a17fa96087e7a708ab0234c0d6851aa6bc3ffe98fe7d5b282d3810664 </span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>令牌有效期 24h，如果时间到了，可以使用命令获取新令牌</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure>\n<h3 id=\"6验证集群\"><a class=\"markdownIt-Anchor\" href=\"#6验证集群\">#</a> 6. 验证集群</h3>\n<ul>\n<li>验证节点状态</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get nodes</span><br></pre></td></tr></table></figure>\n<h3 id=\"7部署dashboard\"><a class=\"markdownIt-Anchor\" href=\"#7部署dashboard\">#</a> 7. 部署 dashboard</h3>\n<ul>\n<li>1. 部署</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.3.1/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure>\n<ul>\n<li>2. 设置访问端口</li>\n</ul>\n<blockquote>\n<p>在里面输入：/type 回车。将 type: ClusterIP 改为 type: NodePort</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl edit svc kubernetes-dashboard -n kubernetes-dashboard</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get svc -A |grep kubernetes-dashboard</span><br><span class=\"line\"><span class=\"comment\">## 运行后会出现端口，找到端口，在安全组放行</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>网页上访问： <span class=\"exturl\" data-url=\"aHR0cHM6Ly94bi0tSVAtZGgzY3I5OWRuNDhhZzkyYQ==\">https:// 集群任意 IP</span>: 端口      <span class=\"exturl\" data-url=\"aHR0cHM6Ly8xMzkuMTk4LjE1LjgxOjMyNzU2\">https://139.198.15.81:32756</span></p>\n</blockquote>\n<ul>\n<li>3. 创建访问账号</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#创建访问账号，准备一个yaml文件； vi dash.yaml，将下面内容复制到文件中</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kubernetes-dashboard</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">rbac.authorization.k8s.io/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ClusterRoleBinding</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\"><span class=\"attr\">roleRef:</span></span><br><span class=\"line\">  <span class=\"attr\">apiGroup:</span> <span class=\"string\">rbac.authorization.k8s.io</span></span><br><span class=\"line\">  <span class=\"attr\">kind:</span> <span class=\"string\">ClusterRole</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">cluster-admin</span></span><br><span class=\"line\"><span class=\"attr\">subjects:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">kind:</span> <span class=\"string\">ServiceAccount</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">admin-user</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用文件</span></span><br><span class=\"line\">kubectl apply -f dash.yaml</span><br></pre></td></tr></table></figure>\n<ul>\n<li>4. 使用令牌访问</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#获取访问令牌</span></span><br><span class=\"line\">kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa/admin-user -o jsonpath=<span class=\"string\">&quot;&#123;.secrets[0].name&#125;&quot;</span>) -o go-template=<span class=\"string\">&quot;&#123;&#123;.data.token | base64decode&#125;&#125;&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">eyJhbGciOiJSUzI1NiIsImtpZCI6IllYSXU5cUZUSVJ5Rzg5Z21FYldkYUY4ZnBrZGtzSjBobHZORDFodHJEWDAifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLTZ4amttIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiIzMzVkYTBlYS01NTM1LTRmMzEtYTdiMS00Nzc5ODdjZWUyMjciLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.D_D66M5Qq1ifwIktD0pk2HwSTXOZKJmeSElQ0KNb5du6h39WkImRE1BSMGq8YBDhLyxZH4yWjZDQ1TW-T2TSTjaYFv6QYOYa1ruynxmozEnok3fSTy60frHGaaP0KenJaspOzJP7uWtZOi4ayoRlgD6Ld4JQTs3JQvASxXN59-DX4mw2<span class=\"number\">-9</span>mikoOsL3cJn8RO_egDIyjn3tnDgFfaP1FDchyKGl<span class=\"number\">-1</span>nAKIe5kZYn1x49sAU0mzBvdT9KdFn4SG6X_52KYeR4rarfkQBYqF8upCg7aXyEJ80hsvnoayXBvHVtNnGEKwEPgZAaxqsi6tTmRR-iKvZ9HPAET4aJQFrQdSVA</span><br></pre></td></tr></table></figure>\n<ul>\n<li>5. 在页面输入令牌即可进入 kubernetes 界面</li>\n</ul>\n<h2 id=\"kubernetes实战\"><a class=\"markdownIt-Anchor\" href=\"#kubernetes实战\">#</a> Kubernetes 实战</h2>\n<h3 id=\"1nmaespace\"><a class=\"markdownIt-Anchor\" href=\"#1nmaespace\">#</a> 1.NmaeSpace</h3>\n<ul>\n<li>NameSpace：名称空间，用来对集群资源济宁隔离划分。默认只隔离资源，不隔离网络</li>\n</ul>\n<blockquote>\n<p>名称空间用来隔离资源</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建名称空间</span></span><br><span class=\"line\">kubectl create ns hello</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除名称空间</span></span><br><span class=\"line\">kubectl delete ns hello</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 用yaml文件创建名称空间，如hello.yaml</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">hello</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\"># 使用hello.yaml文件</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">apply</span> <span class=\"string\">-f</span> <span class=\"string\">hello.yaml</span></span><br><span class=\"line\"><span class=\"comment\"># 删除yaml文件创建的名称空间</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">delete</span> <span class=\"string\">-f</span> <span class=\"string\">hello.yaml</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2pod\"><a class=\"markdownIt-Anchor\" href=\"#2pod\">#</a> 2.Pod</h3>\n<blockquote>\n<p>Pod: 运行中的一组容器，Pod 是 kubernetes 中应用的最小单位.</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建一个pod，--image指定镜像，-n指定名称空间，不写则是放在默认名称空间default中</span></span><br><span class=\"line\"><span class=\"comment\"># 命令行创建</span></span><br><span class=\"line\">kubectl run mynginx --image=nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看default名称空间的Pod</span></span><br><span class=\"line\">kubectl get pod </span><br><span class=\"line\"><span class=\"comment\"># 描述</span></span><br><span class=\"line\">kubectl describe pod 你自己的Pod名字</span><br><span class=\"line\"><span class=\"comment\"># 删除默认名称空间的pod，如果要删除其他名称空间的pod，加上：-n 名称空间</span></span><br><span class=\"line\">kubectl delete pod Pod名字 -n 名称空间</span><br><span class=\"line\"><span class=\"comment\"># 查看Pod的运行日志，-f阻塞式追踪：有日志就显示</span></span><br><span class=\"line\">kubectl logs Pod名字</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 每个Pod - k8s都会分配一个ip</span></span><br><span class=\"line\">kubectl get pod -owide</span><br><span class=\"line\"><span class=\"comment\"># 使用Pod的ip+pod里面运行容器的端口</span></span><br><span class=\"line\">curl 192.168.169.136</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 集群中的任意一个机器以及任意的应用都能通过Pod分配的ip来访问这个Pod</span></span><br><span class=\"line\"><span class=\"comment\">#每隔一秒运行命令</span></span><br><span class=\"line\">watch -n 1 kubectl get pod</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yaml文件创建Pod</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">run:</span> <span class=\"string\">mynginx</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">mynginx</span>  <span class=\"comment\"># pod的名称</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"comment\">#  namespace: default 指定名称空间 </span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx</span>  <span class=\"comment\">#指定镜像</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">mynginx</span>  <span class=\"comment\"># 容器名称</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3deployment\"><a class=\"markdownIt-Anchor\" href=\"#3deployment\">#</a> 3.Deployment</h3>\n<blockquote>\n<p>控制 Pod，使 Pod 拥有多副本，自愈，扩缩容等能力</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 清除所有Pod，比较下面两个命令有何不同效果？</span></span><br><span class=\"line\">kubectl run mynginx --image=nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自愈能力，使用delete pod删除会重新运行一个pod，要彻底删除使用delete deploy</span></span><br><span class=\"line\">kubectl create deployment mytomcat --image=tomcat:8.5.68</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>1.<strong> 多副本</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用命令行部署一个应用，有三个副本</span></span><br><span class=\"line\">kubectl create deployment my-dep --image=nginx --replicas=3</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 使用yaml文件部署</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">my-dep</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-dep</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">my-dep</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">my-dep</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>2. 扩缩容</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl scale扩缩容</span></span><br><span class=\"line\">kubectl scale --replicas=5 deployment/my-dep</span><br><span class=\"line\"></span><br><span class=\"line\">kubectl edit deployment my-dep</span><br><span class=\"line\"><span class=\"comment\">#修改文件中 replicas</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><strong>3. 自愈 &amp; 故障转移</strong></p>\n<ul>\n<li>\n<p>停机</p>\n</li>\n<li>\n<p>删除 Pod</p>\n</li>\n<li>\n<p>容器崩溃</p>\n</li>\n<li>\n<p>…</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>4. 滚动更新</strong></p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># kubectl set image 更新镜像</span></span><br><span class=\"line\">kubectl <span class=\"built_in\">set</span> image deployment/my-dep nginx=nginx:1.16.1 --record</span><br><span class=\"line\">kubectl rollout status deployment/my-dep</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 修改 kubectl edit deployment/my-dep</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>5. 版本回退</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#历史记录</span></span><br><span class=\"line\">kubectl rollout <span class=\"built_in\">history</span> deployment/my-dep</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看某个历史详情</span></span><br><span class=\"line\">kubectl rollout <span class=\"built_in\">history</span> deployment/my-dep --revision=2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#回滚(回到上次)</span></span><br><span class=\"line\">kubectl rollout undo deployment/my-dep</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#回滚(回到指定版本)</span></span><br><span class=\"line\">kubectl rollout undo deployment/my-dep --to-revision=2</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>更多：</p>\n<p>除了 Deployment，k8s 还有  <code>StatefulSet</code>  、 <code>DaemonSet</code>  、 <code>Job</code>   等 类型资源。我们都称为  <code>工作负载</code> 。</p>\n<p>有状态应用使用   <code>StatefulSet</code>   部署，无状态应用使用  <code>Deployment</code>  部署</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL3poL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL2NvbnRyb2xsZXJzLw==\">https://kubernetes.io/zh/docs/concepts/workloads/controllers/</span></p>\n</blockquote>\n<ul>\n<li><strong>其他工作负载</strong>\n<ul>\n<li>Deployment：无状态应用部署，比如微服务，提供多副本等功能</li>\n<li>StatefulSet: 有状态应用部署，比如 redis，提供稳定的存储、网络等功能</li>\n<li>DaemonSet: 守护型应用部署，比如日志收集组件，在每个机器都运行一份</li>\n<li>Job/CronJob：定时任务部署，比如垃圾清理组件，可以在指定时间运行</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4service\"><a class=\"markdownIt-Anchor\" href=\"#4service\">#</a> 4.Service</h3>\n<blockquote>\n<p>将一组 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rdWJlcm5ldGVzLmlvL2RvY3MvY29uY2VwdHMvd29ya2xvYWRzL3BvZHMvcG9kLW92ZXJ2aWV3Lw==\">Pods</span> 公开为网络服务的抽象方法。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#暴露Deploy,集群内使用service的ip：port就可以负载均衡访问</span></span><br><span class=\"line\">kubectl expose deployment my-dep --port=8000 --target-port=80 </span><br><span class=\"line\"><span class=\"comment\"># --type=ClusterIP 集群IP，只能在集群内部访问</span></span><br><span class=\"line\"><span class=\"comment\"># --type=NodePort 节点端口，可以在集群外部访问</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在应用内部也可以通过   服务名.所在名称空间.csv:端口  访问</span></span><br><span class=\"line\">curl my-dep.default.csv:8000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#使用标签检索Pod</span></span><br><span class=\"line\">kubectl get pod -l app=my-dep</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>1.ClusterIP</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 等同于没有--type的</span></span><br><span class=\"line\">kubectl expose deployment my-dep --port=8000 --target-port=80 --<span class=\"built_in\">type</span>=ClusterIP</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">my-dep</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-dep</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">8000</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">my-dep</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">ClusterIP</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>2.NodePort</strong></li>\n</ul>\n<blockquote>\n<p>NodePort 范围在 30000-32767 之间</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># --type=NodePort 在集群外负载均衡访问</span></span><br><span class=\"line\">kubectl expose deployment my-dep --port=8000 --target-port=80 --<span class=\"built_in\">type</span>=NodePort</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">my-dep</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">my-dep</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">8000</span></span><br><span class=\"line\">    <span class=\"attr\">protocol:</span> <span class=\"string\">TCP</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">my-dep</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5ingress\"><a class=\"markdownIt-Anchor\" href=\"#5ingress\">#</a> 5.Ingress</h3>\n<blockquote>\n<p>Service 的统一网关入口</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.47.0/deploy/static/provider/baremetal/deploy.yaml</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#修改镜像</span></span><br><span class=\"line\">vi deploy.yaml</span><br><span class=\"line\"><span class=\"comment\">#将image的值改为如下值：</span></span><br><span class=\"line\">registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/ingress-nginx-controller:v0.46.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 检查安装的结果</span></span><br><span class=\"line\">kubectl get pod,svc -n ingress-nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 最后别忘记把svc暴露的端口要放行</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"6存储抽象\"><a class=\"markdownIt-Anchor\" href=\"#6存储抽象\">#</a> 6. 存储抽象</h3>\n<h4 id=\"环境准备\"><a class=\"markdownIt-Anchor\" href=\"#环境准备\">#</a> 环境准备</h4>\n<p>1. 所有节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#所有机器安装</span></span><br><span class=\"line\">yum install -y nfs-utils</span><br></pre></td></tr></table></figure>\n<p>2. 主节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#nfs主节点</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;/nfs/data/ *(insecure,rw,sync,no_root_squash)&quot;</span> &gt; /etc/exports</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /nfs/data</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> rpcbind --now</span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> nfs-server --now</span><br><span class=\"line\"><span class=\"comment\">#配置生效</span></span><br><span class=\"line\">exportfs -r</span><br></pre></td></tr></table></figure>\n<p>3. 从节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">showmount -e 172.31.0.2  <span class=\"comment\"># 自己主节点的IP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#执行以下命令挂载 nfs 服务器上的共享目录到本机路径 /root/nfsmount</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /nfs/data</span><br><span class=\"line\"></span><br><span class=\"line\">mount -t nfs 172.31.0.2:/nfs/data /nfs/data</span><br><span class=\"line\"><span class=\"comment\"># 写入一个测试文件</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;hello nfs server&quot;</span> &gt; /nfs/data/test.txt</span><br></pre></td></tr></table></figure>\n<p>4. 原生方式数据挂载</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx-pv-demo</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-pv-demo</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-pv-demo</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx-pv-demo</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">html</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/nginx/html</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">html</span></span><br><span class=\"line\">          <span class=\"attr\">nfs:</span></span><br><span class=\"line\">            <span class=\"attr\">server:</span> <span class=\"number\">172.31</span><span class=\"number\">.0</span><span class=\"number\">.2</span></span><br><span class=\"line\">            <span class=\"attr\">path:</span> <span class=\"string\">/nfs/data/nginx-pv</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"pv-pvc\"><a class=\"markdownIt-Anchor\" href=\"#pv-pvc\">#</a> PV &amp; PVC</h4>\n<blockquote>\n<p><em>PV：持久卷（Persistent Volume），将应用需要持久化的数据保存到指定位置</em></p>\n<p><em>PVC：持久卷申明（<strong>Persistent Volume Claim</strong>），申明需要使用的持久卷规格</em></p>\n</blockquote>\n<p>1. 创建 PV 池</p>\n<blockquote>\n<p>静态创建</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#nfs主节点</span></span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /nfs/data/01</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /nfs/data/02</span><br><span class=\"line\"><span class=\"built_in\">mkdir</span> -p /nfs/data/03</span><br></pre></td></tr></table></figure>\n<p>2. 创建 PV</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pv01-10m</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">10M</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/nfs/data/01</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">172.31</span><span class=\"number\">.0</span><span class=\"number\">.2</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pv02-1gi</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">1Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/nfs/data/02</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">172.31</span><span class=\"number\">.0</span><span class=\"number\">.2</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">pv03-3gi</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">3Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">nfs</span></span><br><span class=\"line\">  <span class=\"attr\">nfs:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/nfs/data/03</span></span><br><span class=\"line\">    <span class=\"attr\">server:</span> <span class=\"number\">172.31</span><span class=\"number\">.0</span><span class=\"number\">.2</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"pvc创建与绑定\"><a class=\"markdownIt-Anchor\" href=\"#pvc创建与绑定\">#</a> PVC 创建与绑定</h4>\n<blockquote>\n<p>创建 pvc</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-pvc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteMany</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">200Mi</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">nfs</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>创建 pod 绑定 pvc</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">labels:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">nginx-deploy-pvc</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">nginx-deploy-pvc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">nginx-deploy-pvc</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">nginx-deploy-pvc</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">html</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/usr/share/nginx/html</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">html</span></span><br><span class=\"line\">          <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">            <span class=\"attr\">claimName:</span> <span class=\"string\">nginx-pvc</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"configmap\"><a class=\"markdownIt-Anchor\" href=\"#configmap\">#</a> ConfigMap</h4>\n<blockquote>\n<p>抽取应用配置，并且可以自动更新</p>\n<p>redis 实例</p>\n</blockquote>\n<p>1. 把之前的配置文件创建为配置集</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建配置，redis保存到k8s的etcd；</span></span><br><span class=\"line\">kubectl create cm redis-conf --from-file=redis.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">data:</span>    <span class=\"comment\">#data是所有真正的数据，key：默认是文件名   value：配置文件的内容</span></span><br><span class=\"line\">  <span class=\"attr\">redis.conf:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    appendonly yes</span></span><br><span class=\"line\"><span class=\"string\"></span><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">redis-conf</span></span><br><span class=\"line\">  <span class=\"attr\">namespace:</span> <span class=\"string\">default</span></span><br></pre></td></tr></table></figure>\n<p>2. 创建 pod</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">redis</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">redis</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">redis</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">redis-server</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;/redis-master/redis.conf&quot;</span>  <span class=\"comment\">#指的是redis容器内部的位置</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">    <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/data</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">mountPath:</span> <span class=\"string\">/redis-master</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">config</span></span><br><span class=\"line\">  <span class=\"attr\">volumes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">data</span></span><br><span class=\"line\">      <span class=\"attr\">emptyDir:</span> &#123;&#125;</span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config</span></span><br><span class=\"line\">      <span class=\"attr\">configMap:</span></span><br><span class=\"line\">        <span class=\"attr\">name:</span> <span class=\"string\">redis-conf</span></span><br><span class=\"line\">        <span class=\"attr\">items:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">redis.conf</span></span><br><span class=\"line\">          <span class=\"attr\">path:</span> <span class=\"string\">redis.conf</span></span><br></pre></td></tr></table></figure>\n<p>3. 检查默认配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">exec</span> -it redis -- redis-cli</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; CONFIG GET appendonly</span><br><span class=\"line\">127.0.0.1:6379&gt; CONFIG GET requirepass</span><br></pre></td></tr></table></figure>\n<p>4. 修改 ConfigMap</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">ConfigMap</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">example-redis-config</span></span><br><span class=\"line\"><span class=\"attr\">data:</span></span><br><span class=\"line\">  <span class=\"attr\">redis-config:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">    maxmemory 2mb</span></span><br><span class=\"line\"><span class=\"string\">    maxmemory-policy allkeys-lru </span></span><br></pre></td></tr></table></figure>\n<p>5. 检查配置是否更新</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl <span class=\"built_in\">exec</span> -it redis -- redis-cli</span><br><span class=\"line\"></span><br><span class=\"line\">127.0.0.1:6379&gt; CONFIG GET maxmemory</span><br><span class=\"line\">127.0.0.1:6379&gt; CONFIG GET maxmemory-policy</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>检查指定文件内容是否已经更新</p>\n<p>修改了 CM。Pod 里面的配置文件会跟着变</p>\n</blockquote>\n<blockquote>\n<p>配置值未更改，因为需要重新启动 Pod 才能从关联的 ConfigMap 中获取更新的值。原因：我们的 Pod 部署的中间件自己本身没有热更新能力</p>\n</blockquote>\n<h4 id=\"secret\"><a class=\"markdownIt-Anchor\" href=\"#secret\">#</a> Secret</h4>\n<blockquote>\n<p>Secret 对象类型用来保存敏感信息，例如密码、OAuth 令牌和 SSH 密钥。 将这些信息放在 secret 中比放在 Pod 的定义或者 容器镜像 中来说更加安全和灵活。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create secret docker-registry wmchong-docker \\</span><br><span class=\"line\">--docker-username=wmchong \\</span><br><span class=\"line\">--docker-password=wmc5201314 \\</span><br><span class=\"line\">--docker-email=2022453755@qq.com</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##命令格式</span></span><br><span class=\"line\">kubectl create secret docker-registry regcred \\</span><br><span class=\"line\">  --docker-server=&lt;你的镜像仓库服务器&gt; \\</span><br><span class=\"line\">  --docker-username=&lt;你的用户名&gt; \\</span><br><span class=\"line\">  --docker-password=&lt;你的密码&gt; \\</span><br><span class=\"line\">  --docker-email=&lt;你的邮箱地址&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Pod</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">private-nginx</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">containers:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">private-nginx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">wmchong/wmc:v1.0</span></span><br><span class=\"line\">  <span class=\"attr\">imagePullSecrets:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">wmchong-docker</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "容器技术"
            ]
        },
        {
            "id": "https://wmingchong.github.io/2022/12/23/BigData/docker/",
            "url": "https://wmingchong.github.io/2022/12/23/BigData/docker/",
            "title": "Docker",
            "date_published": "2022-12-23T07:08:24.000Z",
            "content_html": "<h2 id=\"docker\"><a class=\"markdownIt-Anchor\" href=\"#docker\">#</a> Docker</h2>\n<p>容器化技术</p>\n<ul>\n<li>1、基础镜像 MB 级别</li>\n<li>创建简单</li>\n<li>隔离性强</li>\n<li>启动速度秒级</li>\n<li>移植与分享</li>\n</ul>\n<h2 id=\"安装docker\"><a class=\"markdownIt-Anchor\" href=\"#安装docker\">#</a> 安装 Docker</h2>\n<h2 id=\"1centos下安装docker\"><a class=\"markdownIt-Anchor\" href=\"#1centos下安装docker\">#</a> 1.Centos 下安装 docker</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvY2VudG9zLw==\">其它系统安装参考</span></p>\n<h3 id=\"1如果有请移除以前的docker相关包\"><a class=\"markdownIt-Anchor\" href=\"#1如果有请移除以前的docker相关包\">#</a> 1. 如果有，请移除以前的 docker 相关包</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br></pre></td></tr></table></figure>\n<p>此过程是需要在 root 权限下进行，如果已经是 root 权限可不用 sudo, 后面的命令也是如此</p>\n<h3 id=\"2配置yum源\"><a class=\"markdownIt-Anchor\" href=\"#2配置yum源\">#</a> 2. 配置 yum 源</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils</span><br><span class=\"line\">sudo yum-config-manager \\</span><br><span class=\"line\">--add-repo \\</span><br><span class=\"line\">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<h3 id=\"3安装docker\"><a class=\"markdownIt-Anchor\" href=\"#3安装docker\">#</a> 3. 安装 docker</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n<p>如果此过程提示‘No package docker-ce available’，请参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RhbndlaTAxMDkxNS9hcnRpY2xlL2RldGFpbHMvMTIzNjI5MDk2\">这篇博客</span></p>\n<h3 id=\"4启动docker\"><a class=\"markdownIt-Anchor\" href=\"#4启动docker\">#</a> 4. 启动 Docker</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl <span class=\"built_in\">enable</span> docker --now</span><br></pre></td></tr></table></figure>\n<h3 id=\"5配置镜像下载加速\"><a class=\"markdownIt-Anchor\" href=\"#5配置镜像下载加速\">#</a> 5. 配置镜像下载加速</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /etc/docker</span><br><span class=\"line\">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;registry-mirrors&quot;: [&quot;https://lmccrgeo.mirror.aliyuncs.com&quot;],</span><br><span class=\"line\">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class=\"line\">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class=\"line\">  &quot;log-opts&quot;: &#123;</span><br><span class=\"line\">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;storage-driver&quot;: &quot;overlay2&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n<p>其中 &quot;registry-mirrors&quot; 的参数可设置为自己的加速地址，在个人阿里云的<strong>容器与镜像服务</strong>中查看<strong>镜像加速器地址</strong>。echo “172.31.0.2  cluster-endpoint” &gt;&gt; /etc/hosts</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubeadm init \\</span><br><span class=\"line\">--apiserver-advertise-address=172.31.0.2 \\</span><br><span class=\"line\">--control-plane-endpoint=cluster-endpoint \\</span><br><span class=\"line\">--image-repository registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images \\</span><br><span class=\"line\">--kubernetes-version v1.20.9 \\</span><br><span class=\"line\">--service-cidr=10.96.0.0/16 \\</span><br><span class=\"line\">--pod-network-cidr=192.168.0.0/16</span><br></pre></td></tr></table></figure>\n<h2 id=\"docker基本操作\"><a class=\"markdownIt-Anchor\" href=\"#docker基本操作\">#</a> Docker 基本操作</h2>\n<h3 id=\"1拉镜像\"><a class=\"markdownIt-Anchor\" href=\"#1拉镜像\">#</a> 1. 拉镜像</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 镜像名:版本号，不写版本号默认最新版，即latest</span></span><br><span class=\"line\">docker pull nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有镜像</span></span><br><span class=\"line\">docker images</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除镜像</span></span><br><span class=\"line\">docker rmi 镜像名/ID</span><br></pre></td></tr></table></figure>\n<p>也可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZG9ja2VyLmNvbS9wcm9kdWN0cy9kb2NrZXItaHViLw==\"> DockerHub</span> 里面找自己需要的镜像。</p>\n<h3 id=\"2启动容器\"><a class=\"markdownIt-Anchor\" href=\"#2启动容器\">#</a> 2. 启动容器</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动一个容器</span></span><br><span class=\"line\">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#一些简单参数：-d：后台运行 --name:命名 --restart=always：开机自启  -p：端口映射(ps:主机的88端口映射到容器80端口 88:80)</span></span><br><span class=\"line\">docker run -d --name dock --restart always 88:80 nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#查看正在运行的容器</span></span><br><span class=\"line\">docker ps</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 查看所有容器</span></span><br><span class=\"line\">docker ps -a</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 停止容器</span></span><br><span class=\"line\">docker stop 容器<span class=\"built_in\">id</span>/名字</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#再次启动</span></span><br><span class=\"line\">docker start 容器<span class=\"built_in\">id</span>/名字</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除停止的容器，若要强制删除加 -f</span></span><br><span class=\"line\">docker <span class=\"built_in\">rm</span> 容器名/ID</span><br><span class=\"line\">docker <span class=\"built_in\">rm</span> -f 容器名/ID</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#应用开机自启</span></span><br><span class=\"line\">docker update 容器<span class=\"built_in\">id</span>/名字 --restart=always</span><br></pre></td></tr></table></figure>\n<h3 id=\"3页面修改\"><a class=\"markdownIt-Anchor\" href=\"#3页面修改\">#</a> 3. 页面修改</h3>\n<ul>\n<li>进入容器内修改</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#进入容器内部，修改内容  -it：运行交互命令</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it 容器名/id</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 以Nginx为例</span></span><br><span class=\"line\"><span class=\"comment\">#进入文件夹</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> usr/share/nginx/html/</span><br><span class=\"line\"><span class=\"comment\"># 修改页面内容， &gt; 是覆盖：将里面内容覆盖；&gt;&gt; 追加：在里面的内容基础上追加</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;&lt;h1&gt;Welcome come to Chongqing&lt;/h1&gt;&quot;</span> &gt; index.html</span><br><span class=\"line\"><span class=\"comment\"># 查看index.html的内容</span></span><br><span class=\"line\"><span class=\"built_in\">cat</span> index.html</span><br></pre></td></tr></table></figure>\n<ul>\n<li>挂载数据卷到外部修改</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 挂载 -v 主机地址:容器地址 :ro表示只能在容器里进行读操作； :rw 可以进行写操作</span></span><br><span class=\"line\">docker run -d --name gugu -p 88:80 -v /data/html:/usr/share/nginx/html:ro nginx</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果主机文件目录为空，容器也为空</span></span><br><span class=\"line\"><span class=\"comment\"># 挂载完成后，如果需要修改内容直接到主机的 /data/html 下修改即可</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4提交内容创建自己的镜像\"><a class=\"markdownIt-Anchor\" href=\"#4提交内容创建自己的镜像\">#</a> 4. 提交内容（创建自己的镜像）</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -a :提交的镜像作者； -c :使用Dockerfile指令来创建镜像； -m :提交时的说明文字； -p :在commit时，将容器暂停。</span></span><br><span class=\"line\">docker commit -a <span class=\"string\">&quot;wmc&quot;</span> -m <span class=\"string\">&quot;首页变化&quot;</span> 24f36308a38a wnginx:v1.0</span><br></pre></td></tr></table></figure>\n<h3 id=\"5镜像传输\"><a class=\"markdownIt-Anchor\" href=\"#5镜像传输\">#</a> 5. 镜像传输</h3>\n<ul>\n<li>压缩包传输</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">####压缩包传输######</span></span><br><span class=\"line\"><span class=\"comment\">#将镜像保存成压缩包  -o :输出到的文件</span></span><br><span class=\"line\">docker save [OPTIONS] IMAGE [IMAGE...]</span><br><span class=\"line\">docker save -o abc.tar wnginx:v1.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将镜像传输给其他机器 </span></span><br><span class=\"line\">scp abc.tar 其他机器地址</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在其他机器上加载  -i : 指定导入的文件，代替 STDIN； -q : 精简输出信息。</span></span><br><span class=\"line\">docker load [OPTIONS]</span><br><span class=\"line\">docker load -i abc.atr</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>远程推送到仓库</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">####远程推送到仓库######</span></span><br><span class=\"line\"><span class=\"comment\"># 将旧镜像名改成需要推送到仓库要求的名称</span></span><br><span class=\"line\">docker tag wnginx:v1.0 wmchong/wmc:v1.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 登录到docker hub（没有需要在网页注册）</span></span><br><span class=\"line\">docker login</span><br><span class=\"line\">docker <span class=\"built_in\">logout</span> <span class=\"comment\"># 推送完后退出</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送</span></span><br><span class=\"line\">docker push wmchong/wmc:v1.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在其他机器使用命令拉取镜像</span></span><br><span class=\"line\">docker pull wmchong/wmc:v1.0</span><br></pre></td></tr></table></figure>\n<h3 id=\"6其他命令\"><a class=\"markdownIt-Anchor\" href=\"#6其他命令\">#</a> 6. 其他命令</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --<span class=\"built_in\">help</span>  <span class=\"comment\"># 可以使用--help，查看帮助文档</span></span><br><span class=\"line\">docker <span class=\"built_in\">log</span> 容器名/ID  <span class=\"comment\"># 查看日志，排错</span></span><br><span class=\"line\">docker <span class=\"built_in\">cp</span> 95e332b7f4b1:/etc/nginx/nginx.conf /data/conf/nginx.conf  <span class=\"comment\"># 将内容进行复制</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## docker 修改配置文件，用挂载的方法</span></span><br><span class=\"line\">docker run -d -p 80:80 -v /data/html:/usr/share/nginx/html:ro -v /data/conf/nginx.conf:/etc/nginx/nginx.conf:ro --name chong nginx</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># redis使用自定义配置文件启动</span></span><br><span class=\"line\">docker run \\</span><br><span class=\"line\">-v /data/redis/redis.conf:/etc/redis/redis.conf \\</span><br><span class=\"line\">-v /data/redis/data:/data \\</span><br><span class=\"line\">-d --name myredis \\</span><br><span class=\"line\">-p 6379:6379 \\</span><br><span class=\"line\">redis redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>\n<h2 id=\"应用打包-dockerfile\"><a class=\"markdownIt-Anchor\" href=\"#应用打包-dockerfile\">#</a> 应用打包 - DockerFile</h2>\n<h3 id=\"1-以前\"><a class=\"markdownIt-Anchor\" href=\"#1-以前\">#</a> 1、以前</h3>\n<p>Java 为例</p>\n<ul>\n<li>SpringBoot 打包成可执行 jar</li>\n<li>把 jar 包上传给服务</li>\n<li>服务器运行 java -jar</li>\n</ul>\n<h3 id=\"2现在\"><a class=\"markdownIt-Anchor\" href=\"#2现在\">#</a> 2. 现在</h3>\n<p>编写 Dockerfile</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> openjdk:<span class=\"number\">8</span>-jdk-slim  <span class=\"comment\"># 基础运行环境</span></span><br><span class=\"line\"><span class=\"keyword\">LABEL</span><span class=\"language-bash\"> maintainer=wmchong  <span class=\"comment\"># 作者</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> target/*.jar  /app.jar </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"string\">&quot;java&quot;</span>,<span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;/app.jar&quot;</span>]  <span class=\"comment\"># 镜像的启动命令</span></span></span><br></pre></td></tr></table></figure>\n<p>构建镜像</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker build -t java-demo2:v1.0 .</span><br></pre></td></tr></table></figure>\n<p>启动容器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8080:8080 --name chong java-demo2:v1.0</span><br></pre></td></tr></table></figure>\n<p>上传镜像到 dockerhub 仓库</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 登录docker hub</span></span><br><span class=\"line\">docker login</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#给旧镜像起名</span></span><br><span class=\"line\">docker tag java-demo2:v1.0  wmchong/java-demo:v1.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 推送到docker hub</span></span><br><span class=\"line\">docker push wmchong/java-demo:v1.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 别的机器</span></span><br><span class=\"line\">docker pull wmchong/java-demo:v1.0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 别的机器运行</span></span><br><span class=\"line\">docker run -d -p 8080:8080 --name myjava-app java-demo:v1.0 </span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "容器技术"
            ]
        },
        {
            "id": "https://wmingchong.github.io/2022/11/24/jichu/%E8%AE%A1%E7%AE%97%E6%9C%BA/",
            "url": "https://wmingchong.github.io/2022/11/24/jichu/%E8%AE%A1%E7%AE%97%E6%9C%BA/",
            "title": "计算机基础",
            "date_published": "2022-11-24T02:09:39.000Z",
            "content_html": "<h1 id=\"计算机基础\"><a class=\"markdownIt-Anchor\" href=\"#计算机基础\">#</a> 计算机基础</h1>\n<h2 id=\"什么是计算机\"><a class=\"markdownIt-Anchor\" href=\"#什么是计算机\">#</a> 什么是计算机</h2>\n<ul>\n<li>Computer：全称电子计算机，俗称电脑</li>\n<li>能够按照程序运行，自动，高速处理海量数据的现代化智能电子设备</li>\n<li>由硬件和软件组成</li>\n<li>常见的有台式计算机，笔记本计算机，大型计算机</li>\n<li>广泛应用在：科学计算，数据处理，自动控制，计算机辅助设计，人工智能，网络等领域。</li>\n</ul>\n<h2 id=\"计算机硬件\"><a class=\"markdownIt-Anchor\" href=\"#计算机硬件\">#</a> 计算机硬件</h2>\n<ul>\n<li>\n<p>一些物理装置按照系统结构的要求构成一个有机整体为计算机软件提供物质基础</p>\n</li>\n<li>\n<p>计算机硬件组成：CPU、主板、内存、电源、主机箱、硬盘、显卡、键盘、鼠标、显示器等。</p>\n</li>\n<li>\n<p>CPU：是计算机中负责读取指令、对指令译码，并执行指令的核心部件。</p>\n</li>\n<li>\n<p>显卡：显卡是计算机最基本、最重要的配件之一，是数模信号转换的设备，承担着输出和显示图形的任务。</p>\n</li>\n<li>\n<p>硬盘：是计算机最主要的存储设备。</p>\n</li>\n</ul>\n",
            "tags": [
                "计算机基础"
            ]
        }
    ]
}