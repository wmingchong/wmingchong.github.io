{
    "version": "https://jsonfeed.org/version/1",
    "title": "严于律己 宽以待人 • All posts by \"大数据技术\" tag",
    "description": "",
    "home_page_url": "https://wmingchong.github.io",
    "items": [
        {
            "id": "https://wmingchong.github.io/2023/02/24/BigData/%E5%A4%A7%E6%95%B0%E6%8D%AE-shell/",
            "url": "https://wmingchong.github.io/2023/02/24/BigData/%E5%A4%A7%E6%95%B0%E6%8D%AE-shell/",
            "title": "大数据技术-Shell",
            "date_published": "2023-02-24T03:09:45.000Z",
            "content_html": "<h3 id=\"shell\"><a class=\"markdownIt-Anchor\" href=\"#shell\">#</a> shell</h3>\n<h4 id=\"第一章-shell概述\"><a class=\"markdownIt-Anchor\" href=\"#第一章-shell概述\">#</a> 第一章 Shell 概述</h4>\n<p>shell 是一个命令行解释器，它接收应用程序、用户命令，然后调用操作系统</p>\n<p>shell 还是一个功能强大的编程语言，易编写，易调试，灵活性强（但现在基本使用 python）</p>\n<h4 id=\"第二章-shell解释器\"><a class=\"markdownIt-Anchor\" href=\"#第二章-shell解释器\">#</a> 第二章 Shell 解释器</h4>\n<p>1.Linux 提供的 Shell 解释器有：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# cat /etc/shells</span><br><span class=\"line\">/bin/sh  #常用</span><br><span class=\"line\">/bin/bash  #常用</span><br><span class=\"line\">/sbin/nologin</span><br><span class=\"line\">/usr/bin/sh</span><br><span class=\"line\">/usr/bin/bash</span><br><span class=\"line\">/usr/sbin/nologin</span><br></pre></td></tr></table></figure>\n<p>2.bash 和 sh 的关系</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 bin]$ ll | grep bash</span><br><span class=\"line\">-rwxr-xr-x. 1 root root 941880 5月  11 2016 bash</span><br><span class=\"line\">lrwxrwxrwx. 1 root root      4 5月  27 2017 sh -&gt; bash</span><br></pre></td></tr></table></figure>\n<p>3.centos 默认的解释器是 bash</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost bin]# echo $SHELL</span><br><span class=\"line\">/bin/bash</span><br></pre></td></tr></table></figure>\n<h4 id=\"第三章-shell脚本入门\"><a class=\"markdownIt-Anchor\" href=\"#第三章-shell脚本入门\">#</a> 第三章 Shell 脚本入门</h4>\n<p>1．脚本格式</p>\n<p>脚本以 #!/bin/bash 开头（指定解析器，用 bash 解析）</p>\n<p>2. 实际操作：helloworld</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost datas]# touch helloworld.sh</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!bin/bash</span></span><br><span class=\"line\">hello world!</span><br></pre></td></tr></table></figure>\n<p>第一种：采用 bash 或 sh + 脚本的相对路径或绝对路径（不用赋予脚本 + x 权限）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost datas]# bash /root/datas/hellword.sh </span><br><span class=\"line\">hello word!</span><br><span class=\"line\">[root@localhost datas]# sh /root/datas/hellword.sh </span><br><span class=\"line\">hello word!</span><br></pre></td></tr></table></figure>\n<p>第二种：采用输入脚本的绝对路径或相对路径执行脚本（必须具有可执行权限 + x）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#首先要赋予helloworld.sh 脚本的+x权限</span><br><span class=\"line\">[root@localhost datas]# chmod 777 hellword.sh</span><br><span class=\"line\">#执行脚本</span><br><span class=\"line\">[root@localhost datas]# ./hellword.sh</span><br><span class=\"line\">hello word!</span><br></pre></td></tr></table></figure>\n<p><strong>注意：第一种执行方法，本质是 bash 解析器帮你执行脚本，所以脚本本身不需要执行权限。第二种执行方法，本质是脚本需要自己执行，所以需要执行权限。</strong></p>\n<p>3. 第二个脚本：多命令脚本</p>\n<p>要求在 /root 下面创建一个 banzhang.txt, 并在文件中增加‘i love you’</p>\n<p>实际操作：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ touch batch.sh</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ vi batch.sh</span><br><span class=\"line\"></span><br><span class=\"line\">在batch.sh中输入如下内容</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/atguigu</span><br><span class=\"line\">touch cls.txt</span><br><span class=\"line\">echo &quot;I love cls&quot; &gt;&gt;cls.txt</span><br></pre></td></tr></table></figure>\n<h4 id=\"第四章-shell中的变量\"><a class=\"markdownIt-Anchor\" href=\"#第四章-shell中的变量\">#</a> 第四章 Shell 中的变量</h4>\n<h5 id=\"41-系统变量\"><a class=\"markdownIt-Anchor\" href=\"#41-系统变量\">#</a> 4.1 系统变量</h5>\n<p>1. 常用系统变量</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>H</mi><mi>O</mi><mi>M</mi><mi>E</mi><mtext>、</mtext></mrow><annotation encoding=\"application/x-tex\">HOME、</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord cjk_fallback\">、</span></span></span></span>PWD、<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mi>H</mi><mi>E</mi><mi>L</mi><mi>L</mi><mtext>、</mtext></mrow><annotation encoding=\"application/x-tex\">SHELL、</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mord mathnormal\">L</span><span class=\"mord mathnormal\">L</span><span class=\"mord cjk_fallback\">、</span></span></span></span>USER 等</p>\n<h5 id=\"42-自定义变量\"><a class=\"markdownIt-Anchor\" href=\"#42-自定义变量\">#</a> 4.2 自定义变量</h5>\n<p><strong>1. 基本语法</strong></p>\n<p>（1）定义变量：变量 = 值</p>\n<p>（2）撤销变量：unset 变量</p>\n<p>（3）声明静态变量：readonly 变量，注意：不能 unset</p>\n<p><strong>2．变量定义规则</strong></p>\n<p>​\t（1）变量名称可以由字母、数字和下划线组成，但是不能以数字开头，环境变量名建议大写。</p>\n<p>​\t（2）等号两侧不能有空格</p>\n<p>​\t（3）在 bash 中，变量默认类型都是字符串类型，无法直接进行数值运算。</p>\n<p>​\t（4）变量的值如果有空格，需要使用双引号或单引号括起来。</p>\n<h5 id=\"3实际操作\"><a class=\"markdownIt-Anchor\" href=\"#3实际操作\">#</a> 3. 实际操作</h5>\n<p>1. 在 bash 中，变量默认类型都是字符串类型，无法直接进行数值运算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 ~]$ C=1+2</span><br><span class=\"line\">[atguigu@hadoop102 ~]$ echo $C</span><br><span class=\"line\">1+2</span><br></pre></td></tr></table></figure>\n<p>2. 变量的值如果有空格，需要使用双引号或单引号括起来</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 ~]$ D=I love banzhang</span><br><span class=\"line\">-bash: world: command not found</span><br><span class=\"line\">[atguigu@hadoop102 ~]$ D=&quot;I love banzhang&quot;</span><br><span class=\"line\">[atguigu@hadoop102 ~]$ echo $A</span><br><span class=\"line\">I love banzhang</span><br></pre></td></tr></table></figure>\n<p>3. 可把变量提升为全局环境变量，可供其他 Shell 程序使用</p>\n<p>export 变量名（在配置 hadoop、hive、java 等环境变量中使用）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost datas]# vi hellword.sh</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo &quot;hello word!&quot;</span><br><span class=\"line\">echo $d</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost datas]# ./hellword.sh </span><br><span class=\"line\">hello word!</span><br><span class=\"line\"></span><br><span class=\"line\">[root@localhost datas]# export d  #提升为全局变量</span><br><span class=\"line\">[root@localhost datas]# ./hellword.sh </span><br><span class=\"line\">hello word!</span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<h5 id=\"43特殊变量\"><a class=\"markdownIt-Anchor\" href=\"#43特殊变量\">#</a> 4.3 特殊变量</h5>\n<p><strong>$n</strong></p>\n<p>$n\t（功能描述：n 为数字，$0 代表该脚本名称，$1-<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>9</mn><mtext>代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如</mtext></mrow><annotation encoding=\"application/x-tex\">9代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">9</span><span class=\"mord cjk_fallback\">代</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">第</span><span class=\"mord cjk_fallback\">一</span><span class=\"mord cjk_fallback\">到</span><span class=\"mord cjk_fallback\">第</span><span class=\"mord cjk_fallback\">九</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">参</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">十</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">上</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">参</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">十</span><span class=\"mord cjk_fallback\">以</span><span class=\"mord cjk_fallback\">上</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">参</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">需</span><span class=\"mord cjk_fallback\">要</span><span class=\"mord cjk_fallback\">用</span><span class=\"mord cjk_fallback\">大</span><span class=\"mord cjk_fallback\">括</span><span class=\"mord cjk_fallback\">号</span><span class=\"mord cjk_fallback\">包</span><span class=\"mord cjk_fallback\">含</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">如</span></span></span></span> {10}）</p>\n<p>2．案例实操</p>\n<p>（1）输出该脚本文件名称、输入参数 1 和输入参数 2 的值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ touch parameter.sh </span><br><span class=\"line\">[atguigu@hadoop101 datas]$ vim parameter.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo &quot;$0  $1   $2&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ chmod 777 parameter.sh</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ ./parameter.sh cls  xz</span><br><span class=\"line\">./parameter.sh  cls   xz</span><br></pre></td></tr></table></figure>\n<p><strong>$#</strong></p>\n<p>1．基本语法</p>\n<p>​\t$#\t（功能描述：获取所有输入参数个数，常用于循环）。</p>\n<p>2．案例实操</p>\n<p>（1）获取输入参数的个数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ vim parameter.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo &quot;$0  $1   $2&quot;</span><br><span class=\"line\">echo $#</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ chmod 777 parameter.sh</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ ./parameter.sh cls  xz</span><br><span class=\"line\">parameter.sh cls xz </span><br><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n<p><strong><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∗</mo><mo separator=\"true\">,</mo></mrow><annotation encoding=\"application/x-tex\">*,</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6597200000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∗</span><span class=\"mpunct\">,</span></span></span></span>@</strong></p>\n<p>1．基本语法</p>\n<p>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∗</mo><mtext>（功能描述：这个变量代表命令行中所有的参数，</mtext></mrow><annotation encoding=\"application/x-tex\">*\t（功能描述：这个变量代表命令行中所有的参数，</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">∗</span><span class=\"mord cjk_fallback\">（</span><span class=\"mord cjk_fallback\">功</span><span class=\"mord cjk_fallback\">能</span><span class=\"mord cjk_fallback\">描</span><span class=\"mord cjk_fallback\">述</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">这</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">变</span><span class=\"mord cjk_fallback\">量</span><span class=\"mord cjk_fallback\">代</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">命</span><span class=\"mord cjk_fallback\">令</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">中</span><span class=\"mord cjk_fallback\">所</span><span class=\"mord cjk_fallback\">有</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">参</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">，</span></span></span></span>* 把所有的参数看成一个整体）</p>\n<p>​\t<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">@</mi><mtext>（功能描述：这个变量也代表命令行中所有的参数，不过</mtext></mrow><annotation encoding=\"application/x-tex\">@\t（功能描述：这个变量也代表命令行中所有的参数，不过</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">@</span><span class=\"mord cjk_fallback\">（</span><span class=\"mord cjk_fallback\">功</span><span class=\"mord cjk_fallback\">能</span><span class=\"mord cjk_fallback\">描</span><span class=\"mord cjk_fallback\">述</span><span class=\"mord cjk_fallback\">：</span><span class=\"mord cjk_fallback\">这</span><span class=\"mord cjk_fallback\">个</span><span class=\"mord cjk_fallback\">变</span><span class=\"mord cjk_fallback\">量</span><span class=\"mord cjk_fallback\">也</span><span class=\"mord cjk_fallback\">代</span><span class=\"mord cjk_fallback\">表</span><span class=\"mord cjk_fallback\">命</span><span class=\"mord cjk_fallback\">令</span><span class=\"mord cjk_fallback\">行</span><span class=\"mord cjk_fallback\">中</span><span class=\"mord cjk_fallback\">所</span><span class=\"mord cjk_fallback\">有</span><span class=\"mord cjk_fallback\">的</span><span class=\"mord cjk_fallback\">参</span><span class=\"mord cjk_fallback\">数</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">不</span><span class=\"mord cjk_fallback\">过</span></span></span></span> @把每个参数区分对待）</p>\n<p>2．案例实操</p>\n<p>（1）打印输入的所有参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ vim parameter.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo &quot;$0  $1   $2&quot;</span><br><span class=\"line\">echo $#</span><br><span class=\"line\">echo $*</span><br><span class=\"line\">echo $@</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ bash parameter.sh 1 2 3</span><br><span class=\"line\">parameter.sh  1   2</span><br><span class=\"line\">3</span><br><span class=\"line\">1 2 3</span><br><span class=\"line\">1 2 3</span><br></pre></td></tr></table></figure>\n<p><strong>$?</strong></p>\n<p>1．基本语法</p>\n<p>$？\t（功能描述：最后一次执行的命令的返回状态。如果这个变量的值为 0，证明上一个命令正确执行；如果这个变量的值为非 0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。）</p>\n<p>2．案例实操</p>\n<p>​\t（1）判断 helloworld.sh 脚本是否正确执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ ./helloworld.sh </span><br><span class=\"line\">hello world</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ echo $?</span><br><span class=\"line\">0</span><br></pre></td></tr></table></figure>\n<h4 id=\"第五章-运算符\"><a class=\"markdownIt-Anchor\" href=\"#第五章-运算符\">#</a> 第五章 运算符</h4>\n<p><strong>1．基本语法</strong></p>\n<p>（1）“<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mtext>运算式</mtext><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mtext>”或“</mtext></mrow><annotation encoding=\"application/x-tex\">((运算式))”或“</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord cjk_fallback\">运</span><span class=\"mord cjk_fallback\">算</span><span class=\"mord cjk_fallback\">式</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mord\">”</span><span class=\"mord cjk_fallback\">或</span><span class=\"mord\">“</span></span></span></span>[运算式]”</p>\n<p>（2）expr  + , - , *,  /,  %   加，减，乘，除，取余</p>\n<p><strong>注意：expr 运算符间要有空格</strong></p>\n<p><strong>2．案例实操：</strong></p>\n<p>（1）计算 3+2 的值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ expr 2 + 3</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n<p>（2）计算（2+3）X4 的值</p>\n<p>​\t（a）expr 一步完成计算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ expr `expr 2 + 3` \\* 4</span><br><span class=\"line\">20</span><br></pre></td></tr></table></figure>\n<p>​\t（b）采用 $[运算式] 方式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost datas]# a=$[(2+3)*4]</span><br><span class=\"line\">[root@localhost datas]# echo $a</span><br><span class=\"line\">20</span><br></pre></td></tr></table></figure>\n<h4 id=\"第六章-条件判断\"><a class=\"markdownIt-Anchor\" href=\"#第六章-条件判断\">#</a> 第六章 条件判断</h4>\n<p><strong>1．基本语法</strong></p>\n<p>[condition]（注意 condition 前后要有空格）</p>\n<p>注意：条件非空即为 true，[atguigu] 返回 true，[] 返回 false。</p>\n<p>*<em>2. 常用判断条件</em> *</p>\n<p>（1）两个整数之间比较</p>\n<p>= 字符串比较</p>\n<p>-lt 小于（less than）\t\t\t-le 小于等于（less equal）</p>\n<p>-eq 等于（equal）\t\t\t\t-gt 大于（greater than）</p>\n<p>-ge 大于等于（greater equal）\t-ne 不等于（Not equal）</p>\n<p>（2）按照文件权限进行判断</p>\n<p>-r 有读的权限（read）\t\t\t-w 有写的权限（write）</p>\n<p>-x 有执行的权限（execute）</p>\n<p>（3）按照文件类型进行判断</p>\n<p>-f 文件存在并且是一个常规的文件（file）</p>\n<p>-e 文件存在（existence）\t\t-d 文件存在并是一个目录（directory）</p>\n<h4 id=\"第七章-流程控制\"><a class=\"markdownIt-Anchor\" href=\"#第七章-流程控制\">#</a> 第七章 流程控制</h4>\n<h5 id=\"71-if判断\"><a class=\"markdownIt-Anchor\" href=\"#71-if判断\">#</a> 7.1 if 判断</h5>\n<p>1．基本语法</p>\n<p>if [条件判断式];then</p>\n<p>程序</p>\n<p>fi</p>\n<p><strong>或者</strong></p>\n<p>if [条件判断式]</p>\n<p>then</p>\n<p>程序</p>\n<p>fi</p>\n<p>​\t<strong>注意事项</strong>：</p>\n<p>（1）[条件判断式]，中括号和条件判断式之间必须有空格</p>\n<p>（2）if 后要有空格</p>\n<p><strong>2．案例实操</strong></p>\n<p>（1）输入一个数字，如果是 1，则输出 banzhang zhen shuai，如果是 2，则输出 cls zhen mei，如果是其它，什么也不输出。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $1 -eq &quot;1&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">        echo &quot;banzhang zhen shuai&quot;</span><br><span class=\"line\">elif [ $1 -eq &quot;2&quot; ]</span><br><span class=\"line\">then</span><br><span class=\"line\">        echo &quot;cls zhen mei&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ chmod 777 if.sh </span><br><span class=\"line\">[atguigu@hadoop101 datas]$ ./if.sh 1</span><br><span class=\"line\">banzhang zhen shuai</span><br></pre></td></tr></table></figure>\n<h5 id=\"72-case语句\"><a class=\"markdownIt-Anchor\" href=\"#72-case语句\">#</a> 7.2 case 语句</h5>\n<p><strong>1．基本语法</strong></p>\n<p>case $ 变量名 in</p>\n<p>“值 1”）</p>\n<p>如果变量的值等于值 1，则执行程序 1</p>\n<p>;;</p>\n<p>“值 2”）</p>\n<p>如果变量的值等于值 2，则执行程序 2</p>\n<p>;;</p>\n<p>… 省略其他分支…</p>\n<p>*）</p>\n<p>如果变量的值都不是以上的值，则执行此程序</p>\n<p>;;</p>\n<p>esac</p>\n<p><strong>注意事项：</strong></p>\n<p>\\1) case 行尾必须为单词 “in”，每一个模式匹配必须以右括号 “）” 结束。</p>\n<p>\\2) 双分号 “<em><strong>*;;*</strong></em>” 表示命令序列结束，相当于 java 中的 break。</p>\n<p>\\3) 最后的 “*）” 表示默认模式，相当于 java 中的 default。</p>\n<p><strong>2．案例实操</strong></p>\n<p>（1）输入一个数字，如果是 1，则输出 banzhang，如果是 2，则输出 cls，如果是其它，输出 renyao。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ vim case.sh</span><br><span class=\"line\"></span><br><span class=\"line\">!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">case $1 in</span><br><span class=\"line\">&quot;1&quot;)</span><br><span class=\"line\">        echo &quot;banzhang&quot;</span><br><span class=\"line\">;;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;2&quot;)</span><br><span class=\"line\">        echo &quot;cls&quot;</span><br><span class=\"line\">;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">        echo &quot;renyao&quot;</span><br><span class=\"line\">;;</span><br><span class=\"line\">esac</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ chmod 777 case.sh</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ ./case.sh 1</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure>\n<h5 id=\"73-for循环\"><a class=\"markdownIt-Anchor\" href=\"#73-for循环\">#</a> 7.3 for 循环</h5>\n<p>1．基本语法 1</p>\n<p>​\tfor ((初始值；循环控制条件；变量变化))</p>\n<p>do</p>\n<p>程序</p>\n<p>done</p>\n<p>2．案例实操</p>\n<p>（1）从 1 加到 100</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ touch for1.sh</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ vim for1.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">s=0</span><br><span class=\"line\">for((i=0;i&lt;=100;i++))</span><br><span class=\"line\">do</span><br><span class=\"line\">        s=$[$s+$i]</span><br><span class=\"line\">done</span><br><span class=\"line\">echo $s</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ chmod 777 for1.sh </span><br><span class=\"line\">[atguigu@hadoop101 datas]$ ./for1.sh </span><br><span class=\"line\">“5050”</span><br></pre></td></tr></table></figure>\n<p>3．基本语法 2</p>\n<p>for 变量 in 值 1 值 2 值 3…</p>\n<p>do</p>\n<p>程序</p>\n<p>done</p>\n<p>4．案例实操</p>\n<p>​\t（1）打印所有输入参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ touch for2.sh</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ vim for2.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">#打印数字</span><br><span class=\"line\"></span><br><span class=\"line\">for i in $*</span><br><span class=\"line\">    do</span><br><span class=\"line\">      echo &quot;ban zhang love $i &quot;</span><br><span class=\"line\">    done</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ chmod 777 for2.sh </span><br><span class=\"line\">[atguigu@hadoop101 datas]$ bash for2.sh cls xz bd</span><br><span class=\"line\">ban zhang love cls</span><br><span class=\"line\">ban zhang love xz</span><br><span class=\"line\">ban zhang love bd</span><br></pre></td></tr></table></figure>\n<p>（2）比较<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∗</mo><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">*和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">∗</span><span class=\"mord cjk_fallback\">和</span></span></span></span> @区别</p>\n<p>（a）<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∗</mo><mtext>和</mtext></mrow><annotation encoding=\"application/x-tex\">*和</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">∗</span><span class=\"mord cjk_fallback\">和</span></span></span></span> @都表示传递给函数或脚本的所有参数，不被双引号 “” 包含时，都以 $1 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">2 …</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span>n 的形式输出所有参数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ touch for.sh</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ vim for.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash </span><br><span class=\"line\"></span><br><span class=\"line\">for i in $*</span><br><span class=\"line\">do</span><br><span class=\"line\">      echo &quot;ban zhang love $i &quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">for j in $@</span><br><span class=\"line\">do      </span><br><span class=\"line\">        echo &quot;ban zhang love $j&quot;</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ bash for.sh cls xz bd</span><br><span class=\"line\">ban zhang love cls </span><br><span class=\"line\">ban zhang love xz </span><br><span class=\"line\">ban zhang love bd </span><br><span class=\"line\">ban zhang love cls</span><br><span class=\"line\">ban zhang love xz</span><br><span class=\"line\">ban zhang love bd</span><br></pre></td></tr></table></figure>\n<p>（b）当它们被双引号 “” 包含时，“$*” 会将所有的参数作为一个整体，以 “$1 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">2 …</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span>n” 的形式输出所有参数；“$@” 会将各个参数分开，以 “$1” “<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mtext>”</mtext><mo>…</mo><mtext>”</mtext></mrow><annotation encoding=\"application/x-tex\">2”…”</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">”</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">”</span></span></span></span>n” 的形式输出所有参数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash </span><br><span class=\"line\"></span><br><span class=\"line\">for i in &quot;$*&quot; </span><br><span class=\"line\">#$*中的所有参数看成是一个整体，所以这个for循环只会循环一次 </span><br><span class=\"line\">        do </span><br><span class=\"line\">                echo &quot;ban zhang love $i&quot;</span><br><span class=\"line\">        done </span><br><span class=\"line\"></span><br><span class=\"line\">for j in &quot;$@&quot; </span><br><span class=\"line\">#$@中的每个参数都看成是独立的，所以“$@”中有几个参数，就会循环几次 </span><br><span class=\"line\">        do </span><br><span class=\"line\">                echo &quot;ban zhang love $j&quot; </span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ chmod 777 for.sh</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ bash for.sh cls xz bd</span><br><span class=\"line\">ban zhang love cls xz bd</span><br><span class=\"line\">ban zhang love cls</span><br><span class=\"line\">ban zhang love xz</span><br><span class=\"line\">ban zhang love bd</span><br></pre></td></tr></table></figure>\n<h5 id=\"74-while循环\"><a class=\"markdownIt-Anchor\" href=\"#74-while循环\">#</a> 7.4 while 循环</h5>\n<p>1．基本语法</p>\n<p>while [条件判断式]</p>\n<p>do</p>\n<p>程序</p>\n<p>done</p>\n<p>2．案例实操</p>\n<p>​\t（1）从 1 加到 100</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ touch while.sh</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ vim while.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">s=0</span><br><span class=\"line\">i=1</span><br><span class=\"line\">while [ $i -le 100 ]</span><br><span class=\"line\">do</span><br><span class=\"line\">        s=$[$s+$i]</span><br><span class=\"line\">        i=$[$i+1]</span><br><span class=\"line\">done</span><br><span class=\"line\"></span><br><span class=\"line\">echo $s</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ chmod 777 while.sh </span><br><span class=\"line\">[atguigu@hadoop101 datas]$ ./while.sh </span><br><span class=\"line\">5050</span><br></pre></td></tr></table></figure>\n<h4 id=\"第八章-read读取控制台输入\"><a class=\"markdownIt-Anchor\" href=\"#第八章-read读取控制台输入\">#</a> 第八章 read 读取控制台输入</h4>\n<p>1．基本语法</p>\n<p>​\tread (选项)(参数)</p>\n<p>​\t选项：</p>\n<p>-p：指定读取值时的提示符；</p>\n<p>-t：指定读取值时等待的时间（秒）。</p>\n<p>参数</p>\n<p>​\t变量：指定读取值的变量名</p>\n<p>2．案例实操</p>\n<p>​\t（1）提示 7 秒内，读取控制台输入的名称</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ touch read.sh</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ vim read.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">read -t 7 -p &quot;Enter your name in 7 seconds &quot; NAME</span><br><span class=\"line\">echo $NAME</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ ./read.sh </span><br><span class=\"line\">Enter your name in 7 seconds xiaoze</span><br><span class=\"line\">xiaoze</span><br></pre></td></tr></table></figure>\n<h4 id=\"第九章-函数\"><a class=\"markdownIt-Anchor\" href=\"#第九章-函数\">#</a> 第九章 函数</h4>\n<h5 id=\"91-系统函数\"><a class=\"markdownIt-Anchor\" href=\"#91-系统函数\">#</a> 9.1 系统函数</h5>\n<p>1．basename 基本语法</p>\n<p>basename [string /pathname] [suffix]  （功能描述：basename 命令会删掉所有的前缀包括最后一个（‘/’）字符，然后将字符串显示出来。</p>\n<p>选项：</p>\n<p>suffix 为后缀，如果 suffix 被指定了，basename 会将 pathname 或 string 中的 suffix 去掉。</p>\n<p>2．案例实操</p>\n<p>（1）截取该 /home/atguigu/banzhang.txt 路径的文件名称</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ basename /home/atguigu/banzhang.txt </span><br><span class=\"line\">banzhang.txt</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ basename /home/atguigu/banzhang.txt .txt</span><br><span class=\"line\">banzhang</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>dirname 基本语法</li>\n</ol>\n<p>​\tdirname 文件绝对路径\t\t（功能描述：从给定的包含绝对路径的文件名中去除文件名（非目录的部分），然后返回剩下的路径（目录的部分））</p>\n<p>4．案例实操</p>\n<p>（1）获取 banzhang.txt 文件的路径</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 ~]$ dirname /home/atguigu/banzhang.txt </span><br><span class=\"line\">/home/atguigu</span><br></pre></td></tr></table></figure>\n<h5 id=\"92-自定义函数\"><a class=\"markdownIt-Anchor\" href=\"#92-自定义函数\">#</a> 9.2 自定义函数</h5>\n<p>1．基本语法</p>\n<p>[ function ] funname[()]</p>\n<p>{</p>\n<p>​\tAction;</p>\n<p>​\t[return int;]</p>\n<p>}</p>\n<p>funname</p>\n<p>2．经验技巧</p>\n<p>​\t（1）必须在调用函数地方之前，先声明函数，shell 脚本是逐行运行。不会像其它语言一样先编译。</p>\n<p>​\t（2）函数返回值，只能通过 $? 系统变量获得，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。return 后跟数值 n (0-255)</p>\n<p>3．案例实操</p>\n<p>​\t（1）计算两个输入参数的和</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ touch fun.sh</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ vim fun.sh</span><br><span class=\"line\"></span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">function sum()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    s=0</span><br><span class=\"line\">    s=$[ $1 + $2 ]</span><br><span class=\"line\">    echo &quot;$s&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">read -p &quot;Please input the number1: &quot; n1;</span><br><span class=\"line\">read -p &quot;Please input the number2: &quot; n2;</span><br><span class=\"line\">sum $n1 $n2;</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop101 datas]$ chmod 777 fun.sh</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ ./fun.sh </span><br><span class=\"line\">Please input the number1: 2</span><br><span class=\"line\">Please input the number2: 5</span><br><span class=\"line\">7</span><br></pre></td></tr></table></figure>\n<h4 id=\"第十章-shell工具\"><a class=\"markdownIt-Anchor\" href=\"#第十章-shell工具\">#</a> 第十章 Shell 工具</h4>\n<h5 id=\"101-cut\"><a class=\"markdownIt-Anchor\" href=\"#101-cut\">#</a> 10.1 cut</h5>\n<p>cut 的工作就是 “剪”，具体的说就是在文件中负责剪切数据用的。cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段输出。</p>\n<p>1. 基本用法</p>\n<p>cut [选项参数]  filename</p>\n<p>说明：默认分隔符是制表符</p>\n<p>2. 选项参数说明</p>\n<table>\n<thead>\n<tr>\n<th>选项参数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-f</td>\n<td>列号，提取第几列</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>分隔符，按照指定分隔符分割列</td>\n</tr>\n</tbody>\n</table>\n<p>3. 案例实操</p>\n<p>（1）数据准备</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ touch cut.txt</span><br><span class=\"line\">[atguigu@hadoop101 datas]$ vim cut.txt</span><br><span class=\"line\">dong shen</span><br><span class=\"line\">guan zhen</span><br><span class=\"line\">wo  wo</span><br><span class=\"line\">lai  lai</span><br><span class=\"line\">le  le</span><br></pre></td></tr></table></figure>\n<p>（2）在 cut.txt 文件中切割出 guan</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ cat cut.txt | grep &quot;guan&quot; | cut -d &quot; &quot; -f 1</span><br><span class=\"line\">guan</span><br></pre></td></tr></table></figure>\n<p>（3）选取系统 PATH 变量值，第 2 个 “：” 开始后的所有路径：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ echo $PATH</span><br><span class=\"line\">/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/atguigu/bin</span><br><span class=\"line\"></span><br><span class=\"line\">[atguigu@hadoop102 datas]$ echo $PATH | cut -d: -f 2-</span><br><span class=\"line\">/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/atguigu/bin</span><br></pre></td></tr></table></figure>\n<p>（4）切割 ifconfig 后打印的 IP 地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop101 datas]$ ifconfig eth0 | grep &quot;inet addr&quot; | cut -d: -f 2 | cut -d&quot; &quot; -f1</span><br><span class=\"line\">192.168.1.102</span><br></pre></td></tr></table></figure>\n<h5 id=\"102-sed\"><a class=\"markdownIt-Anchor\" href=\"#102-sed\">#</a> 10.2 sed</h5>\n<p>sed 是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为 “模式空间”，接着用 sed 命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。</p>\n<ol>\n<li>基本用法</li>\n</ol>\n<p>sed [选项参数]  ‘command’  filename</p>\n<ol start=\"2\">\n<li>选项参数说明</li>\n</ol>\n<p>表 1-56</p>\n<table>\n<thead>\n<tr>\n<th>选项参数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-e</td>\n<td>直接在指令列模式上进行 sed 的动作编辑。</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>命令功能描述</li>\n</ol>\n<p>表 1-57</p>\n<table>\n<thead>\n<tr>\n<th>命令</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>a</em></td>\n<td>新增，a 的后面可以接字串，在下一行出现</td>\n</tr>\n<tr>\n<td>d</td>\n<td>删除</td>\n</tr>\n<tr>\n<td>s</td>\n<td>查找并替换</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"4\">\n<li>案例实操</li>\n</ol>\n<p>（0）数据准备</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ touch sed.txt</span><br><span class=\"line\">[atguigu@hadoop102 datas]$ vim sed.txt</span><br><span class=\"line\">dong shen</span><br><span class=\"line\">guan zhen</span><br><span class=\"line\">wo  wo</span><br><span class=\"line\">lai  lai</span><br><span class=\"line\"></span><br><span class=\"line\">le  le</span><br></pre></td></tr></table></figure>\n<p>（1）将 “mei nv” 这个单词插入到 sed.txt 第二行下，打印。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ sed &#x27;2a mei nv&#x27; sed.txt </span><br><span class=\"line\">dong shen</span><br><span class=\"line\">guan zhen</span><br><span class=\"line\">mei nv</span><br><span class=\"line\">wo  wo</span><br><span class=\"line\">lai  lai</span><br><span class=\"line\"></span><br><span class=\"line\">le  le</span><br><span class=\"line\">[atguigu@hadoop102 datas]$ cat sed.txt </span><br><span class=\"line\">dong shen</span><br><span class=\"line\">guan zhen</span><br><span class=\"line\">wo  wo</span><br><span class=\"line\">lai  lai</span><br><span class=\"line\"></span><br><span class=\"line\">le  le</span><br></pre></td></tr></table></figure>\n<p><strong>注意：文件并没有改变</strong></p>\n<p>（2）删除 sed.txt 文件所有包含 wo 的行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ sed &#x27;/wo/d&#x27; sed.txt</span><br><span class=\"line\">dong shen</span><br><span class=\"line\">guan zhen</span><br><span class=\"line\">lai  lai</span><br><span class=\"line\"></span><br><span class=\"line\">le  le</span><br></pre></td></tr></table></figure>\n<p>（3）将 sed.txt 文件中 wo 替换为 ni</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ sed &#x27;s/wo/ni/g&#x27; sed.txt </span><br><span class=\"line\">dong shen</span><br><span class=\"line\">guan zhen</span><br><span class=\"line\">ni  ni</span><br><span class=\"line\">lai  lai</span><br><span class=\"line\"></span><br><span class=\"line\">le  le</span><br></pre></td></tr></table></figure>\n<p><strong>注意：‘g’表示 global，全部替换</strong></p>\n<p>（4）将 sed.txt 文件中的第二行删除并将 wo 替换为 ni</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ sed -e &#x27;2d&#x27; -e &#x27;s/wo/ni/g&#x27; sed.txt </span><br><span class=\"line\">dong shen</span><br><span class=\"line\">ni  ni</span><br><span class=\"line\">lai  lai</span><br><span class=\"line\"></span><br><span class=\"line\">le  le</span><br></pre></td></tr></table></figure>\n<h5 id=\"103-awk\"><a class=\"markdownIt-Anchor\" href=\"#103-awk\">#</a> 10.3 awk</h5>\n<p>一个强大的文本分析工具，把文件逐行的读入，以空格为默认分隔符将每行切片，切开的部分再进行分析处理。</p>\n<ol>\n<li>基本用法</li>\n</ol>\n<p>awk [选项参数] ‘pattern1 {action1} pattern2 {action2}…’ filename</p>\n<p>pattern：表示 AWK 在数据中查找的内容，就是匹配模式</p>\n<p>action：在找到匹配内容时所执行的一系列命令</p>\n<ol start=\"2\">\n<li>选项参数说明</li>\n</ol>\n<p>表 1-55</p>\n<table>\n<thead>\n<tr>\n<th>选项参数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-F</td>\n<td>指定输入文件折分隔符</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>赋值一个用户定义变量</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"3\">\n<li>案例实操</li>\n</ol>\n<p>（0）数据准备</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ sudo cp /etc/passwd ./</span><br></pre></td></tr></table></figure>\n<p>（1）搜索 passwd 文件以 root 关键字开头的所有行，并输出该行的第 7 列。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ awk -F: &#x27;/^root/&#123;print $7&#125;&#x27; passwd </span><br><span class=\"line\">/bin/bash</span><br></pre></td></tr></table></figure>\n<p>（2）搜索 passwd 文件以 root 关键字开头的所有行，并输出该行的第 1 列和第 7 列，中间以 “，” 号分割。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ awk -F: &#x27;/^root/&#123;print $1&quot;,&quot;$7&#125;&#x27; passwd </span><br><span class=\"line\">root,/bin/bash</span><br></pre></td></tr></table></figure>\n<p>注意：只有匹配了 pattern 的行才会执行 action</p>\n<p>（3）只显示 /etc/passwd 的第一列和第七列，以逗号分割，且在所有行前面添加列名 user，shell 在最后一行添加 &quot;dahaige，/bin/zuishuai&quot;。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ awk -F : &#x27;BEGIN&#123;print &quot;user, shell&quot;&#125; &#123;print $1&quot;,&quot;$7&#125; END&#123;print &quot;dahaige,/bin/zuishuai&quot;&#125;&#x27; passwd</span><br><span class=\"line\"></span><br><span class=\"line\">user, shell</span><br><span class=\"line\">root,/bin/bash</span><br><span class=\"line\">bin,/sbin/nologin</span><br><span class=\"line\">。。。</span><br><span class=\"line\">atguigu,/bin/bash</span><br><span class=\"line\">dahaige,/bin/zuishuai</span><br></pre></td></tr></table></figure>\n<p>注意：BEGIN 在所有数据读取行之前执行；END 在所有数据执行之后执行。</p>\n<p>（4）将 passwd 文件中的用户 id 增加数值 1 并输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ awk -v i=1 -F: &#x27;&#123;print $3+i&#125;&#x27; passwd</span><br><span class=\"line\"></span><br><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n<ol>\n<li>awk 的内置变量</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>变量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FILENAME</td>\n<td>文件名</td>\n</tr>\n<tr>\n<td>NR</td>\n<td>已读的记录数</td>\n</tr>\n<tr>\n<td>NF</td>\n<td>浏览记录的域的个数（切割后，列的个数）</td>\n</tr>\n</tbody>\n</table>\n<ol start=\"2\">\n<li>案例实操</li>\n</ol>\n<p>（1）统计 passwd 文件名，每行的行号，每行的列数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ awk -F: &#x27;&#123;print &quot;filename:&quot;  FILENAME &quot;, linenumber:&quot; NR  &quot;,columns:&quot; NF&#125;&#x27; passwd </span><br><span class=\"line\"></span><br><span class=\"line\">filename:passwd, linenumber:1,columns:7</span><br><span class=\"line\">filename:passwd, linenumber:2,columns:7</span><br><span class=\"line\">filename:passwd, linenumber:3,columns:7</span><br></pre></td></tr></table></figure>\n<p>​\t （2）切割 IP</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ ifconfig eth0 | grep &quot;inet addr&quot; | awk -F: &#x27;&#123;print $2&#125;&#x27; | awk -F &quot; &quot; &#x27;&#123;print $1&#125;&#x27; </span><br><span class=\"line\">192.168.1.102</span><br></pre></td></tr></table></figure>\n<p>​\t （3）查询 sed.txt 中空行所在的行号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ awk &#x27;/^$/&#123;print NR&#125;&#x27; sed.txt </span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n<h5 id=\"104-sort\"><a class=\"markdownIt-Anchor\" href=\"#104-sort\">#</a> 10.4 sort</h5>\n<p>sort 命令是在 Linux 里非常有用，它将文件进行排序，并将排序结果标准输出。</p>\n<ol>\n<li>基本语法</li>\n</ol>\n<p>sort (选项)(参数)</p>\n<p>表 1-57</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-n</td>\n<td>依照数值的大小排序</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>以相反的顺序来排序</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>设置排序时所用的分隔字符</td>\n</tr>\n<tr>\n<td>-k</td>\n<td>指定需要排序的列</td>\n</tr>\n</tbody>\n</table>\n<p>参数：指定待排序的文件列表</p>\n<ol start=\"2\">\n<li>案例实操</li>\n</ol>\n<p>（0）数据准备</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ touch sort.sh</span><br><span class=\"line\">[atguigu@hadoop102 datas]$ vim sort.sh </span><br><span class=\"line\"></span><br><span class=\"line\">bb:40:5.4</span><br><span class=\"line\">bd:20:4.2</span><br><span class=\"line\">xz:50:2.3</span><br><span class=\"line\">cls:10:3.5</span><br><span class=\"line\">ss:30:1.6</span><br></pre></td></tr></table></figure>\n<p>（1）按照 “：” 分割后的第三列倒序排序。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[atguigu@hadoop102 datas]$ sort -t : -nrk 3  sort.sh </span><br><span class=\"line\">bb:40:5.4</span><br><span class=\"line\">bd:20:4.2</span><br><span class=\"line\">cls:10:3.5</span><br><span class=\"line\">xz:50:2.3</span><br><span class=\"line\">ss:30:1.6</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "大数据技术"
            ]
        }
    ]
}